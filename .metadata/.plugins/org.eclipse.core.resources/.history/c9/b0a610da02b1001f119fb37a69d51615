package gui;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;

import bus.ImportBUS;
import bus.ImportDetailBUS;
import dao.SanPhamDAO;
import entity.Import;
import entity.ImportDetail;
import entity.SanPham;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicScrollBarUI;

import java.awt.*;
import java.awt.event.*;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Logger;

public class ThemDonNhap extends JPanel {
	// Constants
	private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
	private static final Color CONTENT_COLOR = new Color(255, 242, 242);
	private static final Color HOVER_COLOR = new Color(252, 231, 243);
	private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
	private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);

	// Components
	private JTable danhSachSPTable;
	private DefaultTableModel danhSachSPModel;
	private JTable donNhapTable;
	private DefaultTableModel donNhapModel;
	private JLabel tongTienLabel;

	// Text Fields for input
	private JTextField maDonNhapField;
	private JTextField maSPField;
	private JTextField tenSPField;
	private JTextField giaNhapField;
	private JTextField thuongHieuField;
	private JTextField soLuongField;

	// Combo boxes
	private JComboBox<String> nhanVienCombo;
	private JComboBox<String> nhaCungCapCombo;

	// Buttons
	private JButton themSPButton;
	private JButton suaButton;
	private JButton xoaButton;
	private JButton nhapHangButton;
	private JButton danhSachButton;
	private ImportBUS importBUS;
	private ImportDetailBUS importDetailBUS;
	private SanPhamDAO sanPhamDAO;
	private static final Logger LOGGER = Logger.getLogger(ThemDonNhap.class.getName());
	private JComboBox<String> phanLoaiCombo;


	public ThemDonNhap() {
		setLayout(new BorderLayout());
		setBackground(Color.WHITE);
		setBorder(new EmptyBorder(20, 20, 20, 20));
		importDetailBUS =  new ImportDetailBUS();
		// Initialize DAO
		sanPhamDAO = new SanPhamDAO();
		importBUS = new ImportBUS();
		initializeComponents();
		setupLayout();
		addEventListeners();
		loadProductData(); // Replace loadSampleData() with this
	}

	private void loadProductData() {
		try {
			// Clear existing table data
			danhSachSPModel.setRowCount(0);

			// Get all products from database
			ArrayList<SanPham> dsSanPham = sanPhamDAO.getAllSanPham();

			// Add products to table model
			for (SanPham sp : dsSanPham) {
				Object[] row = { sp.getMaSP(), sp.getTenSP(), sp.getSoLuongTonKho() };
				danhSachSPModel.addRow(row);
			}

			LOGGER.info("Đã tải " + dsSanPham.size() + " sản phẩm");

		} catch (Exception e) {
			LOGGER.severe("Lỗi khi tải dữ liệu sản phẩm: " + e.getMessage());
			showMessage("Lỗi khi tải dữ liệu sản phẩm: " + e.getMessage(), JOptionPane.ERROR_MESSAGE);
		}
	}

	private void initializeComponents() {
		// Initialize tables
		setupDanhSachSPTable();
		setupDonNhapTable();

		// Initialize text fields
		maDonNhapField = createStyledTextField(15);
		maSPField = createStyledTextField(10);
		tenSPField = createStyledTextField(20);
		giaNhapField = createStyledTextField(10);
		thuongHieuField = createStyledTextField(15);
		mauSacCombo = createStyledComboBox(new String[] { "Chọn màu sắc" });
		kichCoCombo = createStyledComboBox(new String[] { "Chọn kích cỡ" });
		soLuongField = createStyledTextField(5);

		// Disable fields that should be read-only
		maSPField.setEditable(false);
		tenSPField.setEditable(false);
		mauSacCombo.addActionListener(e -> {
			if (mauSacCombo.getSelectedIndex() > 0) {
				loadSizesForColor(maSPField.getText(), mauSacCombo.getSelectedItem().toString());
			}
		});
		// Initialize combo boxes
		nhanVienCombo = createStyledComboBox(
				new String[] { "Chọn nhân viên", "Nguyễn Thị Tường Vi", "Trần Văn Nam", "Lê Thị Hoa" });
		nhaCungCapCombo = createStyledComboBox(new String[] { "Chọn nhà cung cấp", "Xưởng may Đại Nam",
				"Xưởng may Hoàng Gia", "Công ty TNHH May Việt Tiến" });

		// Initialize buttons
		themSPButton = createStyledButton("Thêm SP vào đơn", "/icon/circle-plus.png", true);
		suaButton = createStyledButton("Sửa", "/icon/pencil.png", false);
		xoaButton = createStyledButton("Xóa", "/icon/trash.png", false);
		nhapHangButton = createStyledButton("NHẬP HÀNG", null, true);
		danhSachButton = createStyledButton("DANH SÁCH ĐƠN NHẬP", null, true);
		danhSachButton.setBackground(Color.white);
		danhSachButton.setFont(CONTENT_FONT);
		danhSachButton.setForeground(Color.black);
		danhSachButton.setPreferredSize(new Dimension(200, 35));
		// Initialize tổng tiền label
		tongTienLabel = new JLabel("TỔNG TIỀN: 0 đ");
		tongTienLabel.setFont(HEADER_FONT);
		tongTienLabel.setForeground(PRIMARY_COLOR);
	}

	private void loadColorsForProduct(String productId) {
		try {
			// Clear existing items
			mauSacCombo.removeAllItems();
			kichCoCombo.removeAllItems();

			// Add default items
			mauSacCombo.addItem("Chọn màu sắc");
			kichCoCombo.addItem("Chọn kích cỡ");

			// Get colors from database
			ArrayList<String> colors = sanPhamDAO.getProductColors(productId);

			// Add colors to combo box
			for (String color : colors) {
				mauSacCombo.addItem(color);
			}

			// Enable/disable based on availability
			mauSacCombo.setEnabled(!colors.isEmpty());
			kichCoCombo.setEnabled(false);

		} catch (Exception e) {
			LOGGER.severe("Error loading colors: " + e.getMessage());
			showMessage("Lỗi khi tải danh sách màu sắc: " + e.getMessage(), JOptionPane.ERROR_MESSAGE);
		}
	}

	private void loadSizesForColor(String productId, String color) {
		try {
			// Clear existing sizes
			kichCoCombo.removeAllItems();
			kichCoCombo.addItem("Chọn kích cỡ");

			// Get sizes for selected color
			ArrayList<String> sizes = sanPhamDAO.getProductSizes(productId, color);

			// Add sizes to combo box
			for (String size : sizes) {
				kichCoCombo.addItem(size);
			}

			// Enable if sizes are available
			kichCoCombo.setEnabled(!sizes.isEmpty());

		} catch (Exception e) {
			LOGGER.severe("Error loading sizes: " + e.getMessage());
			showMessage("Lỗi khi tải danh sách kích cỡ: " + e.getMessage(), JOptionPane.ERROR_MESSAGE);
		}
	}

	private void setupDanhSachSPTable() {
		String[] columns = { "Mã SP", "Tên sản phẩm", "Số lượng tồn" };
		danhSachSPModel = new DefaultTableModel(columns, 0) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};
		danhSachSPTable = new JTable(danhSachSPModel);
		setupTable(danhSachSPTable);
	}

	private void setupDonNhapTable() {
		String[] columns = { "Mã SP", "Tên sản phẩm", "Màu sắc", "Kích cỡ", "Thương hiệu", "Đơn giá", "Số lượng" };
		donNhapModel = new DefaultTableModel(columns, 0) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};
		donNhapTable = new JTable(donNhapModel);
		setupTable(donNhapTable);
	}

	private void setupTable(JTable table) {
		table.setFont(CONTENT_FONT);
		table.setRowHeight(35);
		table.setGridColor(new Color(230, 230, 230));
		table.setShowVerticalLines(true);
		table.setShowHorizontalLines(true);

		// Setup header
		JTableHeader header = table.getTableHeader();
		header.setFont(HEADER_FONT);
		header.setBackground(table == danhSachSPTable ? CONTENT_COLOR : Color.WHITE);
		header.setForeground(Color.BLACK);
		header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));

		// Set selection properties
		table.setSelectionBackground(HOVER_COLOR);
		table.setSelectionForeground(Color.BLACK);

		// Center align for specific columns
		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);

		if (table == danhSachSPTable) {
			table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // Mã SP
			table.getColumnModel().getColumn(2).setCellRenderer(centerRenderer); // Số lượng tồn
			table.setBackground(CONTENT_COLOR);
		} else {
			table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // Mã SP
			table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer); // Kích cỡ
			table.getColumnModel().getColumn(6).setCellRenderer(centerRenderer); // Số lượng

			// Right align for price
			DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
			rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
			table.getColumnModel().getColumn(5).setCellRenderer(rightRenderer); // Đơn giá
		}
	}

	private void setupLayout() {
		setLayout(new BorderLayout(0, 20));

		// Top panel
		add(createTopPanel(), BorderLayout.NORTH);

		// Center panel with split layout
		JPanel centerPanel = new JPanel(new BorderLayout(20, 0)); // Added horizontal gap
		centerPanel.setBackground(Color.WHITE);

		// Left side - Product list panel
		JPanel leftPanel = createDanhSachSPPanel();
		leftPanel.setPreferredSize(new Dimension(400, 0)); // Set preferred width

		// Right side panel
		JPanel rightPanel = new JPanel();
		rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));
		rightPanel.setBackground(Color.WHITE);

		// Product input panel
		rightPanel.add(createProductInputPanel());
		rightPanel.add(Box.createVerticalStrut(20));

		// Order table panel
		rightPanel.add(createOrderTablePanel());

		// Add panels to center panel
		centerPanel.add(leftPanel, BorderLayout.WEST);
		centerPanel.add(rightPanel, BorderLayout.CENTER);

		add(centerPanel, BorderLayout.CENTER);

		// Bottom panel with total and submit button
		add(createBottomPanel(), BorderLayout.SOUTH);
	}

	private JPanel createTopPanel() {
		JPanel panel = new JPanel(new GridBagLayout());
		panel.setBackground(Color.WHITE);
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(5, 5, 5, 15);

		// Mã đơn nhập
		addFormField(panel, "Mã đơn nhập:", maDonNhapField, gbc, 0, 0);

		// Nhân viên combo
		addFormField(panel, "Nhân viên phụ trách:", nhanVienCombo, gbc, 0, 2);

		// Nhà cung cấp combo
		addFormField(panel, "Nhà cung cấp:", nhaCungCapCombo, gbc, 0, 4);

		return panel;
	}

	private JPanel createDanhSachSPPanel() {
		JPanel panel = new JPanel(new BorderLayout());
		panel.setBackground(CONTENT_COLOR);
		panel.setBorder(
				BorderFactory.createCompoundBorder(new EmptyBorder(0, 0, 0, 0), new EmptyBorder(10, 10, 10, 10)));

		// Add title label
		JLabel titleLabel = new JLabel("Danh sách sản phẩm");
		titleLabel.setFont(HEADER_FONT);
		titleLabel.setBorder(new EmptyBorder(0, 0, 10, 0));
		panel.add(titleLabel, BorderLayout.NORTH);

		JScrollPane scrollPane = new JScrollPane(danhSachSPTable);
		styleScrollPane(scrollPane);
		panel.add(scrollPane, BorderLayout.CENTER);

		return panel;
	}

	private JPanel createProductInputPanel() {
		JPanel panel = new JPanel(new BorderLayout());
		panel.setBackground(Color.WHITE);

		// Title label
		JLabel titleLabel = new JLabel("Thông tin sản phẩm nhập");
		titleLabel.setFont(HEADER_FONT);
		titleLabel.setBorder(new EmptyBorder(0, 0, 10, 0));
		panel.add(titleLabel, BorderLayout.NORTH);

		// Input fields panel
		JPanel fieldsPanel = new JPanel(new GridBagLayout());
		fieldsPanel.setBackground(Color.WHITE);
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(5, 5, 5, 15);

		// Row 1
		addFormField(fieldsPanel, "Mã SP:", maSPField, gbc, 0, 0);
		addFormField(fieldsPanel, "Tên sản phẩm:", tenSPField, gbc, 0, 2);

		// Row 2
		addFormField(fieldsPanel, "Giá nhập:", giaNhapField, gbc, 1, 0);
		addFormField(fieldsPanel, "Thương hiệu:", thuongHieuField, gbc, 1, 2);

		// Row 3
		addFormField(fieldsPanel, "Màu sắc:", mauSacCombo, gbc, 2, 0);
		addFormField(fieldsPanel, "Kích cỡ:", kichCoCombo, gbc, 2, 2);
		addFormField(fieldsPanel, "Số lượng:", soLuongField, gbc, 2, 4);

		// Add button
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		buttonPanel.setBackground(Color.WHITE);

		panel.add(fieldsPanel, BorderLayout.CENTER);
		panel.add(buttonPanel, BorderLayout.SOUTH);

		return panel;
	}

	private JPanel createOrderTablePanel() {
		JPanel panel = new JPanel(new BorderLayout(0, 10));
		panel.setBackground(Color.WHITE);

		// Button panel
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
		buttonPanel.setBackground(Color.WHITE);
		buttonPanel.add(themSPButton);
		themSPButton.setPreferredSize(new Dimension(170, 35));
		buttonPanel.add(suaButton);
		buttonPanel.add(xoaButton);

		panel.add(buttonPanel, BorderLayout.NORTH);

		// Table
		JScrollPane scrollPane = new JScrollPane(donNhapTable);
		styleScrollPane(scrollPane);
		panel.add(scrollPane, BorderLayout.CENTER);

		return panel;
	}

	private JPanel createBottomPanel() {
		JPanel panel = new JPanel(new BorderLayout(10, 0));
		panel.setBackground(Color.WHITE);
		panel.setBorder(new EmptyBorder(10, 0, 0, 0));

		panel.add(tongTienLabel, BorderLayout.WEST);
		JPanel panelBt = new JPanel();
		panelBt.add(danhSachButton);
		danhSachButton.addActionListener(e -> {
			// Tìm đến panel chứa nội dung chính (thường là panel ở giữa của giao diện)
			Container mainContent = ThemDonNhap.this.getParent();

			// Xóa nội dung hiện tại của panel chính
			mainContent.removeAll();

			// Thêm panel QuanLyNhapHang mới vào panel chính
			QuanLyNhapHang quanLyPanel = new QuanLyNhapHang();
			mainContent.add(quanLyPanel);

			// Cập nhật và vẽ lại giao diện
			mainContent.revalidate();
			mainContent.repaint();
		});
		panelBt.add(nhapHangButton);

		panel.add(panelBt, BorderLayout.EAST);

		return panel;
	}

	private void addFormField(JPanel panel, String labelText, JComponent field, GridBagConstraints gbc, int row,
			int col) {
		gbc.gridx = col;
		gbc.gridy = row;

		JLabel label = new JLabel(labelText);
		label.setFont(CONTENT_FONT);
		panel.add(label, gbc);

		gbc.gridx = col + 1;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.weightx = 1.0;
		panel.add(field, gbc);

		gbc.fill = GridBagConstraints.NONE;
		gbc.weightx = 0.0;
	}

	private JTextField createStyledTextField(int columns) {
		JTextField field = new JTextField(columns);
		field.setFont(CONTENT_FONT);
		field.setBorder(BorderFactory.createCompoundBorder(new LineBorder(new Color(230, 230, 230), 1),
				BorderFactory.createEmptyBorder(5, 8, 5, 8)));

		field.addFocusListener(new FocusAdapter() {
			@Override
			public void focusGained(FocusEvent e) {
				field.setBorder(BorderFactory.createCompoundBorder(new LineBorder(PRIMARY_COLOR, 1),
						BorderFactory.createEmptyBorder(5, 8, 5, 8)));
			}

			@Override
			public void focusLost(FocusEvent e) {
				field.setBorder(BorderFactory.createCompoundBorder(new LineBorder(new Color(230, 230, 230), 1),
						BorderFactory.createEmptyBorder(5, 8, 5, 8)));
			}
		});

		return field;
	}

	private JComboBox<String> createStyledComboBox(String[] items) {
		JComboBox<String> comboBox = new JComboBox<>(items);
		comboBox.setFont(CONTENT_FONT);
		comboBox.setBackground(Color.WHITE);

		comboBox.setUI(new BasicComboBoxUI() {
			@Override
			protected JButton createArrowButton() {
				JButton button = super.createArrowButton();
				button.setBackground(Color.WHITE);
				button.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
				return button;
			}
		});

		comboBox.setBorder(BorderFactory.createCompoundBorder(new LineBorder(new Color(230, 230, 230), 1),
				BorderFactory.createEmptyBorder(5, 8, 5, 8)));
		comboBox.setRenderer(new DefaultListCellRenderer() {
			@Override
			public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected,
					boolean cellHasFocus) {
				super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
				setFont(CONTENT_FONT);
				setBorder(BorderFactory.createEmptyBorder(5, 8, 5, 8));

				if (isSelected) {
					setBackground(HOVER_COLOR);
					setForeground(Color.BLACK);
				} else {
					setBackground(Color.WHITE);
					setForeground(Color.BLACK);
				}
				return this;
			}
		});

		// Hover effect
		comboBox.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				if (comboBox.isEnabled()) {
					comboBox.setBorder(BorderFactory.createCompoundBorder(new LineBorder(PRIMARY_COLOR, 1),
							BorderFactory.createEmptyBorder(5, 8, 5, 8)));
				}
			}

			@Override
			public void mouseExited(MouseEvent e) {
				if (!comboBox.hasFocus()) {
					comboBox.setBorder(BorderFactory.createCompoundBorder(new LineBorder(new Color(230, 230, 230), 1),
							BorderFactory.createEmptyBorder(5, 8, 5, 8)));
				}
			}
		});

		return comboBox;
	}

	private JButton createStyledButton(String text, String iconPath, boolean isPrimary) {
		JButton button = new JButton(text);
		button.setFont(CONTENT_FONT);
		button.setPreferredSize(new Dimension(120, 40));
		if (iconPath != null) {
			button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
		}

		if (isPrimary) {
			button.setBackground(PRIMARY_COLOR);
			button.setForeground(Color.WHITE);
			button.setBorder(new LineBorder(PRIMARY_COLOR));
		} else {
			button.setBackground(Color.WHITE);
			button.setForeground(Color.BLACK);
			button.setBorder(new LineBorder(new Color(230, 230, 230)));
		}

		button.setFocusPainted(false);

		button.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				if (isPrimary) {
					button.setBackground(PRIMARY_COLOR.darker());
				} else {
					button.setBackground(HOVER_COLOR);
				}
			}

			@Override
			public void mouseExited(MouseEvent e) {
				if (isPrimary) {
					button.setBackground(PRIMARY_COLOR);
				} else {
					button.setBackground(Color.WHITE);
				}
			}
		});

		return button;
	}

	private void styleScrollPane(JScrollPane scrollPane) {
		scrollPane.setBorder(new LineBorder(new Color(230, 230, 230)));
		scrollPane.getViewport().setBackground(Color.WHITE);

		// Style scrollbars
		scrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
			@Override
			protected void configureScrollBarColors() {
				this.thumbColor = PRIMARY_COLOR;
				this.trackColor = new Color(245, 245, 245);
			}

			@Override
			protected JButton createDecreaseButton(int orientation) {
				return createZeroButton();
			}

			@Override
			protected JButton createIncreaseButton(int orientation) {
				return createZeroButton();
			}
		});
	}

	private JButton createZeroButton() {
		JButton button = new JButton();
		button.setPreferredSize(new Dimension(0, 0));
		button.setMinimumSize(new Dimension(0, 0));
		button.setMaximumSize(new Dimension(0, 0));
		return button;
	}

	private void addEventListeners() {
		// Product selection from table
		danhSachSPTable.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				handleProductSelection(e);
			}
		});

		// Add product to order button
		themSPButton.addActionListener(e -> {
			if (validateProductInput()) {
				addProductToOrder();
			}
		});

		// Edit button
		suaButton.addActionListener(e -> {
			int row = donNhapTable.getSelectedRow();
			if (row >= 0) {
				loadProductForEdit(row);
			} else {
				showMessage("Vui lòng chọn sản phẩm cần sửa!", JOptionPane.WARNING_MESSAGE);
			}
		});

		// Delete button
		xoaButton.addActionListener(e -> {
			int row = donNhapTable.getSelectedRow();
			if (row >= 0) {
				int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa sản phẩm này?", "Xác nhận xóa",
						JOptionPane.YES_NO_OPTION);

				if (confirm == JOptionPane.YES_OPTION) {
					donNhapModel.removeRow(row);
					updateTongTien();
				}
			} else {
				showMessage("Vui lòng chọn sản phẩm cần xóa!", JOptionPane.WARNING_MESSAGE);
			}
		});

		// Import button
		nhapHangButton.addActionListener(e -> {
			if (validateOrder()) {
				saveOrder();
			}
		});
	}

	private boolean validateProductInput() {
		if (maSPField.getText().trim().isEmpty()) {
			showMessage("Vui lòng chọn sản phẩm từ danh sách!", JOptionPane.ERROR_MESSAGE);
			return false;
		}
		if (giaNhapField.getText().trim().isEmpty()) {
			showMessage("Vui lòng nhập giá!", JOptionPane.ERROR_MESSAGE);
			return false;
		}
		if (maSPField.getText().trim().isEmpty()) {
			showMessage("Vui lòng chọn sản phẩm từ danh sách!", JOptionPane.ERROR_MESSAGE);
			return false;
		}
		if (mauSacCombo.getSelectedIndex() == 0) {
			showMessage("Vui lòng chọn màu sắc!", JOptionPane.ERROR_MESSAGE);
			return false;
		}
		if (kichCoCombo.getSelectedIndex() == 0) {
			showMessage("Vui lòng chọn kích cỡ!", JOptionPane.ERROR_MESSAGE);
			return false;
		}
		if (soLuongField.getText().trim().isEmpty()) {
			showMessage("Vui lòng nhập số lượng!", JOptionPane.ERROR_MESSAGE);
			return false;
		}

		try {
			double giaNhap = Double.parseDouble(giaNhapField.getText().trim());
			if (giaNhap <= 0) {
				showMessage("Giá nhập phải lớn hơn 0!", JOptionPane.ERROR_MESSAGE);
				return false;
			}
		} catch (NumberFormatException ex) {
			showMessage("Giá nhập không hợp lệ!", JOptionPane.ERROR_MESSAGE);
			return false;
		}

		try {
			int soLuong = Integer.parseInt(soLuongField.getText().trim());
			if (soLuong <= 0) {
				showMessage("Số lượng phải lớn hơn 0!", JOptionPane.ERROR_MESSAGE);
				return false;
			}
		} catch (NumberFormatException ex) {
			showMessage("Số lượng không hợp lệ!", JOptionPane.ERROR_MESSAGE);
			return false;
		}

		return true;
	}

	private void addProductToOrder() {
		try {
			// Get values from fields
			String maSP = maSPField.getText().trim();
			String tenSP = tenSPField.getText().trim();
			String thuongHieu = thuongHieuField.getText().trim();
			String mauSac = mauSacCombo.getSelectedItem().toString();
			String kichCo = kichCoCombo.getSelectedItem().toString();

			// Create variant string for comparison
			String variantIdentifier = String.format("%s-%s-%s", maSP, mauSac, kichCo);

			// Check for duplicate variants in the order table
			for (int i = 0; i < donNhapModel.getRowCount(); i++) {
				String existingMaSP = donNhapModel.getValueAt(i, 0).toString();
				String existingMau = donNhapModel.getValueAt(i, 2).toString();
				String existingSize = donNhapModel.getValueAt(i, 3).toString();
				String existingVariant = String.format("%s-%s-%s", existingMaSP, existingMau, existingSize);

				if (existingVariant.equals(variantIdentifier)) {
					showMessage("Phân loại sản phẩm này đã có trong đơn nhập!", JOptionPane.WARNING_MESSAGE);
					return;
				}
			}

			// Parse and validate price
			double giaNhap = parsePrice(giaNhapField.getText().trim());
			if (giaNhap <= 0) {
				throw new IllegalArgumentException("Giá nhập phải lớn hơn 0");
			}

			// Parse and validate quantity
			int soLuong = Integer.parseInt(soLuongField.getText().trim());
			if (soLuong <= 0) {
				throw new IllegalArgumentException("Số lượng phải lớn hơn 0");
			}

			// Format price for display
			NumberFormat formatter = NumberFormat.getNumberInstance();
			String giaNhapFormatted = formatter.format(giaNhap);

			// Add to table with variant information
			donNhapModel.addRow(new Object[] { maSP, // Mã SP
					tenSP, // Tên sản phẩm
					mauSac, // Màu sắc
					kichCo, // Kích cỡ
					thuongHieu, // Thương hiệu
					giaNhapFormatted, // Đơn giá
					soLuong // Số lượng
			});

			// Update total amount
			updateTongTien();

			// Clear input fields
			clearProductInputs();
			// Reset combo boxes
			mauSacCombo.setSelectedIndex(0);
			kichCoCombo.setSelectedIndex(0);

			LOGGER.info(String.format("Added product variant: %s to order", variantIdentifier));

		} catch (NumberFormatException e) {
			showMessage("Giá trị không hợp lệ: " + e.getMessage(), JOptionPane.ERROR_MESSAGE);
		} catch (IllegalArgumentException e) {
			showMessage(e.getMessage(), JOptionPane.ERROR_MESSAGE);
		} catch (Exception e) {
			LOGGER.severe("Error adding product to order: " + e.getMessage());
			showMessage("Lỗi khi thêm sản phẩm: " + e.getMessage(), JOptionPane.ERROR_MESSAGE);
		}
	}

	private void handleProductSelection(MouseEvent e) {
		int selectedRow = danhSachSPTable.getSelectedRow();
		if (selectedRow >= 0) {
			try {
				String maSP = danhSachSPModel.getValueAt(selectedRow, 0).toString();

				// Get full product details from database
				SanPham sp = sanPhamDAO.getSanPhamByID(maSP);
				if (sp != null) {
					// Populate fields with product data
					maSPField.setText(sp.getMaSP());
					tenSPField.setText(sp.getTenSP());
					thuongHieuField.setText(sp.getThuongHieu());

					// Load color options for this product
					loadColorsForProduct(sp.getMaSP());

					// Reset other input fields
					soLuongField.setText("");
					giaNhapField.setText("");

					// Focus on the first selection
					mauSacCombo.requestFocus();
				}

			} catch (Exception ex) {
				LOGGER.severe("Lỗi khi lấy thông tin sản phẩm: " + ex.getMessage());
				showMessage("Lỗi khi lấy thông tin sản phẩm: " + ex.getMessage(), JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	private void loadProductForEdit(int row) {
		try {
			// Load basic product info
			maSPField.setText(donNhapModel.getValueAt(row, 0).toString());
			tenSPField.setText(donNhapModel.getValueAt(row, 1).toString());
			thuongHieuField.setText(donNhapModel.getValueAt(row, 4).toString());

			// Get variant info
			String color = donNhapModel.getValueAt(row, 2).toString();
			String size = donNhapModel.getValueAt(row, 3).toString();

			// Load color options and select the current color
			loadColorsForProduct(maSPField.getText());
			mauSacCombo.setSelectedItem(color);

			// Load size options for the selected color and select current size
			loadSizesForColor(maSPField.getText(), color);
			kichCoCombo.setSelectedItem(size);

			// Set price and quantity
			giaNhapField.setText(donNhapModel.getValueAt(row, 5).toString().replace(",", ""));
			soLuongField.setText(donNhapModel.getValueAt(row, 6).toString());

			// Remove the row from the table
			donNhapModel.removeRow(row);
			updateTongTien();

		} catch (Exception e) {
			LOGGER.severe("Error loading product for edit: " + e.getMessage());
			showMessage("Lỗi khi tải thông tin sản phẩm: " + e.getMessage(), JOptionPane.ERROR_MESSAGE);
		}
	}

	private void clearProductInputs() {
		maSPField.setText("");
		tenSPField.setText("");
		giaNhapField.setText("");

		thuongHieuField.setText("");
		soLuongField.setText("");
		danhSachSPTable.clearSelection();
	}

	private void saveOrder() {
		try {
			// 1. Validate the entire order first
			if (!validateOrder()) {
				return;
			}

			// 2. Create Import object
			Import importOrder = createImportOrder();

			// 3. Create ImportDetail objects
			java.util.List<ImportDetail> details = createImportDetails();
			importOrder.setImportDetails(details);

			// 4. Calculate total amount
			double totalAmount = calculateTotalAmount(details);
			importOrder.setTotalAmount(totalAmount);

			// 5. Save to database
			boolean success = importBUS.createImport(importOrder);

			if (success) {
				showMessage("Đã lưu đơn nhập hàng thành công!", JOptionPane.INFORMATION_MESSAGE);
				clearForm();
				// Switch back to QuanLyNhapHang view
				switchToQuanLyNhapHang();
			} else {
				showMessage("Không thể lưu đơn nhập hàng. Vui lòng thử lại!", JOptionPane.ERROR_MESSAGE);
			}

		} catch (Exception e) {
			showMessage("Lỗi khi lưu đơn nhập: " + e.getMessage(), JOptionPane.ERROR_MESSAGE);
		}
	}

	private Import createImportOrder() {
		Import importOrder = new Import();

		// Set basic information
		String importId = maDonNhapField.getText().trim();
		importOrder.setImportID(importId);

		// Get selected supplier - remove "Chọn nhà cung cấp" text if present
		String supplier = nhaCungCapCombo.getSelectedItem().toString();
		if (supplier.startsWith("Chọn")) {
			throw new IllegalStateException("Vui lòng chọn nhà cung cấp");
		}
		importOrder.setSupplier(supplier);

		// Get selected staff - remove "Chọn nhân viên" text if present
		String staff = nhanVienCombo.getSelectedItem().toString();
		if (staff.startsWith("Chọn")) {
			throw new IllegalStateException("Vui lòng chọn nhân viên");
		}
		importOrder.setStaff(staff);

		// Set current date/time
		importOrder.setImportDate(new Date());

		return importOrder;
	}

	private java.util.List<ImportDetail> createImportDetails() {
		java.util.List<ImportDetail> details = new ArrayList<>();

		// Iterate through the order table
		for (int i = 0; i < donNhapModel.getRowCount(); i++) {
			ImportDetail detail = new ImportDetail();

			// Get values from table model
			String variantId = donNhapModel.getValueAt(i, 0).toString();
			double price = parsePrice(donNhapModel.getValueAt(i, 5).toString());
			int quantity = Integer.parseInt(donNhapModel.getValueAt(i, 6).toString());

			// Set values
			detail.setVariantID(variantId);
			detail.setPrice(price);
			detail.setQuantity(quantity);

			details.add(detail);
		}

		return details;
	}

	private double calculateTotalAmount(java.util.List<ImportDetail> details) {
		return details.stream().mapToDouble(detail -> detail.getPrice() * detail.getQuantity()).sum();
	}

	private double parsePrice(String priceStr) {
		// Remove currency formatting
		String cleanPrice = priceStr.replaceAll("[^\\d.]", "");
		try {
			return Double.parseDouble(cleanPrice);
		} catch (NumberFormatException e) {
			throw new IllegalArgumentException("Invalid price format: " + priceStr);
		}
	}

	private void switchToQuanLyNhapHang() {
		Container mainContent = ThemDonNhap.this.getParent();
		mainContent.removeAll();
		QuanLyNhapHang quanLyPanel = new QuanLyNhapHang();
		mainContent.add(quanLyPanel);
		mainContent.revalidate();
		mainContent.repaint();
	}

	// Enhance your existing validateOrder method
	private boolean validateOrder() {
		try {
			// Basic validation
			if (maDonNhapField.getText().trim().isEmpty()) {
				throw new IllegalStateException("Vui lòng nhập mã đơn nhập");
			}

			if (nhanVienCombo.getSelectedIndex() == 0) {
				throw new IllegalStateException("Vui lòng chọn nhân viên");
			}

			if (nhaCungCapCombo.getSelectedIndex() == 0) {
				throw new IllegalStateException("Vui lòng chọn nhà cung cấp");
			}

			if (donNhapModel.getRowCount() == 0) {
				throw new IllegalStateException("Vui lòng thêm ít nhất một sản phẩm vào đơn");
			}

			// Validate each product in the order
			for (int i = 0; i < donNhapModel.getRowCount(); i++) {
				String productId = donNhapModel.getValueAt(i, 0).toString();
				String priceStr = donNhapModel.getValueAt(i, 5).toString();
				String quantityStr = donNhapModel.getValueAt(i, 6).toString();

				if (productId.isEmpty()) {
					throw new IllegalStateException("Mã sản phẩm không được để trống");
				}

				// Validate price
				double price = parsePrice(priceStr);
				if (price <= 0) {
					throw new IllegalStateException("Giá nhập phải lớn hơn 0");
				}

				// Validate quantity
				int quantity = Integer.parseInt(quantityStr);
				if (quantity <= 0) {
					throw new IllegalStateException("Số lượng phải lớn hơn 0");
				}
			}

			return true;

		} catch (IllegalStateException e) {
			showMessage(e.getMessage(), JOptionPane.ERROR_MESSAGE);
			return false;
		} catch (Exception e) {
			showMessage("Lỗi xác thực dữ liệu: " + e.getMessage(), JOptionPane.ERROR_MESSAGE);
			return false;
		}
	}

	private void clearForm() {
		maDonNhapField.setText("");
		nhanVienCombo.setSelectedIndex(0);
		nhaCungCapCombo.setSelectedIndex(0);
		clearProductInputs();
		donNhapModel.setRowCount(0);
		updateTongTien();
	}

	private void updateTongTien() {
		double total = 0;
		for (int i = 0; i < donNhapModel.getRowCount(); i++) {
			String priceStr = donNhapModel.getValueAt(i, 5).toString().replace(",", "");
			double price = Double.parseDouble(priceStr);
			int quantity = Integer.parseInt(donNhapModel.getValueAt(i, 6).toString());
			total += price * quantity;
		}

		NumberFormat formatter = NumberFormat.getNumberInstance();
		tongTienLabel.setText("TỔNG TIỀN: " + formatter.format(total) + " đ");
	}

	private void loadSampleData() {
		// Sample data for danh sách SP
		Object[][] danhSachData = { { "SP01", "Váy kẻ caro cúc", "30" }, { "SP02", "Áo sơ mi trắng", "25" },
				{ "SP03", "Quần jean nữ", "40" } };

		for (Object[] row : danhSachData) {
			danhSachSPModel.addRow(row);
		}

		// Sample data for đơn nhập
		Object[][] donNhapData = { { "SP001", "Váy ngắn kẻ caro", "Hồng nhạt", "L", "Brand A", "250,000", "3" } };

		for (Object[] row : donNhapData) {
			donNhapModel.addRow(row);
		}

		updateTongTien();
	}

	private void showMessage(String message, int messageType) {
		JOptionPane.showMessageDialog(this, message, "Thông báo", messageType);
	}

}
