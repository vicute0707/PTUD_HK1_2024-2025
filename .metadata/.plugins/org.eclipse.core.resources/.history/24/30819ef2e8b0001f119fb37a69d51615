package component;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

public class ImageUploadUtil {
    private static final Logger LOGGER = Logger.getLogger(ImageUploadUtil.class.getName());
    private static final String IMAGE_DIRECTORY = "src/img_product";
    private static final String DEFAULT_IMAGE = "default-product.jpg";
    private static final long MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
    private static final String[] ALLOWED_EXTENSIONS = {".jpg", ".jpeg", ".png"};

    static {
        // Ensure image directory exists when class is loaded
        try {
            Files.createDirectories(Paths.get(IMAGE_DIRECTORY));
            
            // Copy default image if it doesn't exist
            Path defaultImagePath = Paths.get(IMAGE_DIRECTORY, DEFAULT_IMAGE);
            if (!Files.exists(defaultImagePath)) {
                // Copy from resources or create a blank image
                Path sourceDefault = Paths.get("src/resources", DEFAULT_IMAGE);
                if (Files.exists(sourceDefault)) {
                    Files.copy(sourceDefault, defaultImagePath);
                }
            }
        } catch (IOException e) {
            LOGGER.severe("Failed to initialize image directory: " + e.getMessage());
        }
    }

    public static String uploadProductImage(String sourcePath, String productId) throws IOException {
        LOGGER.info("Attempting to upload image from: " + sourcePath + " for product: " + productId);
        
        if (sourcePath == null || sourcePath.trim().isEmpty()) {
            LOGGER.warning("No source path provided for product: " + productId);
            return DEFAULT_IMAGE;
        }

        File sourceFile = new File(sourcePath);
        if (!sourceFile.exists()) {
            LOGGER.warning("Source file does not exist: " + sourcePath);
            return DEFAULT_IMAGE;
        }

        try {
            // Validate file
            validateImageFile(sourceFile);

            // Create unique filename
            String extension = getFileExtension(sourceFile.getName());
            String newFileName = productId + extension;
            Path targetPath = Paths.get(IMAGE_DIRECTORY, newFileName);

            // Ensure directory exists
            Files.createDirectories(targetPath.getParent());

            // Copy file with replace if exists
            Files.copy(sourceFile.toPath(), targetPath, StandardCopyOption.REPLACE_EXISTING);
            LOGGER.info("Successfully uploaded image to: " + targetPath);
            
            return newFileName;
        } catch (Exception e) {
            LOGGER.severe("Failed to upload image: " + e.getMessage());
            return DEFAULT_IMAGE;
        }
    }

    public static String updateProductImage(String newImagePath, String productId, String oldFileName) {
        LOGGER.info("Updating image for product " + productId + " from " + newImagePath);
        
        try {
            // Only proceed with update if new image is provided
            if (newImagePath == null || newImagePath.trim().isEmpty()) {
                LOGGER.info("No new image provided, keeping existing image");
                return oldFileName != null ? oldFileName : DEFAULT_IMAGE;
            }

            File newImageFile = new File(newImagePath);
            if (!newImageFile.exists()) {
                LOGGER.warning("New image file does not exist: " + newImagePath);
                return oldFileName;
            }

            // Delete old image if it exists and isn't the default
            if (oldFileName != null && !oldFileName.equals(DEFAULT_IMAGE)) {
                Path oldImagePath = Paths.get(IMAGE_DIRECTORY, oldFileName);
                try {
                    Files.deleteIfExists(oldImagePath);
                    LOGGER.info("Deleted old image: " + oldFileName);
                } catch (IOException e) {
                    LOGGER.warning("Failed to delete old image: " + e.getMessage());
                }
            }

            // Upload new image
            String newFileName = uploadProductImage(newImagePath, productId);
            LOGGER.info("Updated image to: " + newFileName);
            return newFileName;

        } catch (Exception e) {
            LOGGER.severe("Error updating image: " + e.getMessage());
            return oldFileName != null ? oldFileName : DEFAULT_IMAGE;
        }
    }

    public static ImageIcon loadProductImage(String imageName, int width, int height) {
        if (imageName == null || imageName.trim().isEmpty()) {
            imageName = DEFAULT_IMAGE;
        }

        Path imagePath = Paths.get(IMAGE_DIRECTORY, imageName);
        LOGGER.info("Loading image from: " + imagePath);

        try {
            if (!Files.exists(imagePath)) {
                LOGGER.warning("Image not found: " + imagePath);
                imagePath = Paths.get(IMAGE_DIRECTORY, DEFAULT_IMAGE);
            }

            ImageIcon imageIcon = new ImageIcon(imagePath.toString());
            Image image = imageIcon.getImage();
            Image scaledImage = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
            return new ImageIcon(scaledImage);

        } catch (Exception e) {
            LOGGER.severe("Error loading image: " + e.getMessage());
            return null;
        }
    }

    private static void validateImageFile(File file) throws IllegalArgumentException {
        if (file == null || !file.exists()) {
            throw new IllegalArgumentException("File does not exist");
        }

        if (file.length() > MAX_FILE_SIZE) {
            throw new IllegalArgumentException("File size exceeds 5MB limit");
        }

        String extension = getFileExtension(file.getName()).toLowerCase();
        boolean isValidExtension = false;
        for (String allowedExt : ALLOWED_EXTENSIONS) {
            if (allowedExt.equalsIgnoreCase(extension)) {
                isValidExtension = true;
                break;
            }
        }

        if (!isValidExtension) {
            throw new IllegalArgumentException("Invalid file format. Allowed: JPG, JPEG, PNG");
        }
    }

    private static String getFileExtension(String fileName) {
        int lastDot = fileName.lastIndexOf('.');
        return lastDot > 0 ? fileName.substring(lastDot) : "";
    }
}