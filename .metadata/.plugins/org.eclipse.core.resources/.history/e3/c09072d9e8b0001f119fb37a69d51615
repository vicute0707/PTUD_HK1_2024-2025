package component;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

public class ImageUploadUtil {
	private static final Logger LOGGER = Logger.getLogger(ImageUploadUtil.class.getName());
	private static final String IMAGE_DIRECTORY = "src/img_product";
	private static final String DEFAULT_IMAGE = "default-product.jpg";

	/**
	 * Updates a product's image with proper cleanup of old images. This method
	 * handles the entire image update process including: 1. Validating the new
	 * image 2. Removing the old image 3. Copying the new image to the correct
	 * location
	 */
	public static String updateProductImage(String newImagePath, String productId, String oldImageName) {
		LOGGER.info("Starting image update process for product: " + productId);
		LOGGER.info("New image path: " + newImagePath);
		LOGGER.info("Old image name: " + oldImageName);

		// If no new image is provided, keep the current one
		if (newImagePath == null || newImagePath.trim().isEmpty()) {
			return oldImageName != null ? oldImageName : DEFAULT_IMAGE;
		}

		try {
			// First, verify the new image exists
			File newImageFile = new File(newImagePath);
			if (!newImageFile.exists()) {
				LOGGER.warning("New image file not found: " + newImagePath);
				return oldImageName;
			}

			// Get the extension of the new image
			String extension = getFileExtension(newImageFile.getName());
			String newFileName = productId + extension;

			// Create the image directory if it doesn't exist
			Files.createDirectories(Paths.get(IMAGE_DIRECTORY));

			// Remove old image if it exists and isn't the default
			if (oldImageName != null && !oldImageName.equals(DEFAULT_IMAGE)) {
				Path oldImagePath = Paths.get(IMAGE_DIRECTORY, oldImageName);
				if (Files.exists(oldImagePath)) {
					try {
						Files.delete(oldImagePath);
						LOGGER.info("Successfully deleted old image: " + oldImagePath);
					} catch (IOException e) {
						LOGGER.warning("Failed to delete old image: " + e.getMessage());
						// Continue with the update even if delete fails
					}
				}
			}

			// Copy new image to destination
			Path destinationPath = Paths.get(IMAGE_DIRECTORY, newFileName);
			Files.copy(newImageFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);
			LOGGER.info("Successfully copied new image: " + newFileName);

			return newFileName;

		} catch (Exception e) {
			LOGGER.severe("Error during image update: " + e.getMessage());
			// If anything goes wrong, keep the old image
			return oldImageName != null ? oldImageName : DEFAULT_IMAGE;
		}
	}

	/**
	 * Gets the file extension from a filename, including the dot.
	 */
	private static String getFileExtension(String fileName) {
		int lastDot = fileName.lastIndexOf('.');
		return lastDot > 0 ? fileName.substring(lastDot) : "";
	}

	/**
	 * Checks if a path points to a valid image file with an allowed extension.
	 */
	private static boolean isValidImageFile(String path) {
		if (path == null || path.trim().isEmpty()) {
			return false;
		}

		String lowerPath = path.toLowerCase();
		return lowerPath.endsWith(".jpg") || lowerPath.endsWith(".jpeg") || lowerPath.endsWith(".png");
	}

	/**
	 * Safely deletes an image file from the product images directory. Returns true
	 * if deletion was successful or file didn't exist.
	 */
	public static boolean deleteProductImage(String imageName) {
		if (imageName == null || imageName.equals(DEFAULT_IMAGE)) {
			return false;
		}

		try {
			Path imagePath = Paths.get(IMAGE_DIRECTORY, imageName);
			if (Files.exists(imagePath)) {
				Files.delete(imagePath);
				LOGGER.info("Successfully deleted image: " + imageName);
				return true;
			}
			return false;
		} catch (IOException e) {
			LOGGER.severe("Failed to delete image " + imageName + ": " + e.getMessage());
			return false;
		}
	}
}