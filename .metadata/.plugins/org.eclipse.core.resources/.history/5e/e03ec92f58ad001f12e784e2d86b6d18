package export;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.CellRangeAddress;
import javax.swing.*;
import javax.swing.table.TableModel;
import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.Component;

public class ExcelExporterNV {
	private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-yyyy_HH-mm-ss");

	public static void exportToExcel(JTable table, String title, Component parentComponent) {
		try (XSSFWorkbook workbook = new XSSFWorkbook()) {
			// Tạo một sheet mới
			XSSFSheet sheet = workbook.createSheet("Báo cáo");

			// Thiết lập độ rộng cột mặc định
			sheet.setDefaultColumnWidth(15);

			// Tạo các style cho workbook
			CellStyle titleStyle = createTitleStyle(workbook);
			CellStyle headerStyle = createHeaderStyle(workbook);
			CellStyle dateStyle = createDateStyle(workbook);
			CellStyle dataStyle = createDataStyle(workbook);
			CellStyle numberStyle = createNumberStyle(workbook);

			// Tạo logo hoặc header của công ty (nếu có)
			int currentRow = 0;

			// Tạo tiêu đề báo cáo
			Row titleRow = sheet.createRow(currentRow++);
			titleRow.setHeight((short) 800); // Điều chỉnh chiều cao của dòng tiêu đề
			Cell titleCell = titleRow.createCell(0);
			titleCell.setCellValue("BÁO CÁO " + title.toUpperCase());
			titleCell.setCellStyle(titleStyle);
			sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, table.getColumnCount() - 1));

			// Thêm ngày giờ xuất báo cáo
			Row dateRow = sheet.createRow(currentRow++);
			Cell dateCell = dateRow.createCell(0);
			dateCell.setCellValue(
					"Ngày xuất báo cáo: " + new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date()));
			dateCell.setCellStyle(dateStyle);
			sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, table.getColumnCount() - 1));

			// Thêm dòng trống để tạo khoảng cách
			currentRow++;

			// Tạo header cho bảng
			Row headerRow = sheet.createRow(currentRow++);
			headerRow.setHeight((short) 600);
			TableModel model = table.getModel();

			for (int col = 0; col < model.getColumnCount(); col++) {
				Cell cell = headerRow.createCell(col);
				cell.setCellValue(model.getColumnName(col));
				cell.setCellStyle(headerStyle);

				// Tự động điều chỉnh độ rộng cột
				sheet.autoSizeColumn(col);
				// Thêm một chút padding
				sheet.setColumnWidth(col, sheet.getColumnWidth(col) + 1000);
			}

			// Thêm dữ liệu
			for (int row = 0; row < model.getRowCount(); row++) {
				Row dataRow = sheet.createRow(currentRow++);
				for (int col = 0; col < model.getColumnCount(); col++) {
					Cell cell = dataRow.createCell(col);
					Object value = model.getValueAt(row, col);

					// Kiểm tra và định dạng dữ liệu theo kiểu
					if (value != null) {
						if (value instanceof Number) {
							cell.setCellValue(((Number) value).doubleValue());
							cell.setCellStyle(numberStyle);
						} else {
							cell.setCellValue(value.toString());
							cell.setCellStyle(dataStyle);
						}
					}
				}
				// Thiết lập chiều cao hàng cho dữ liệu
				dataRow.setHeight((short) 400);
			}

			// Tạo phần chân trang hoặc tổng kết (nếu cần)
			currentRow += 2;
			Row footerRow = sheet.createRow(currentRow);
			Cell footerCell = footerRow.createCell(0);
			footerCell.setCellValue("* Ghi chú: Báo cáo được tạo tự động từ hệ thống");
			footerCell.setCellStyle(dateStyle);
			sheet.addMergedRegion(new CellRangeAddress(currentRow, currentRow, 0, table.getColumnCount() - 1));

			// Hiển thị hộp thoại chọn nơi lưu file
			JFileChooser fileChooser = new JFileChooser();
			fileChooser.setDialogTitle("Chọn vị trí lưu file");
			String defaultFileName = title.toLowerCase().replace(" ", "_") + "_" + DATE_FORMAT.format(new Date())
					+ ".xlsx";
			fileChooser.setSelectedFile(new File(defaultFileName));

			if (fileChooser.showSaveDialog(parentComponent) == JFileChooser.APPROVE_OPTION) {
				File file = fileChooser.getSelectedFile();
				if (!file.getName().toLowerCase().endsWith(".xlsx")) {
					file = new File(file.getAbsolutePath() + ".xlsx");
				}

				// Lưu workbook
				try (FileOutputStream out = new FileOutputStream(file)) {
					workbook.write(out);
				}

				JOptionPane.showMessageDialog(parentComponent,
						"Xuất file Excel thành công!\nVị trí: " + file.getAbsolutePath(), "Thành công",
						JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(parentComponent, "Lỗi khi xuất file Excel: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private static CellStyle createTitleStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		Font font = workbook.createFont();
		font.setBold(true);
		font.setFontHeightInPoints((short) 16);
		style.setFont(font);
		style.setAlignment(HorizontalAlignment.CENTER);
		style.setVerticalAlignment(VerticalAlignment.CENTER);
		return style;
	}

	private static CellStyle createHeaderStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		Font font = workbook.createFont();
		font.setBold(true);
		font.setColor(IndexedColors.WHITE.getIndex());
		style.setFont(font);
		style.setFillForegroundColor(IndexedColors.ROYAL_BLUE.getIndex());
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		style.setAlignment(HorizontalAlignment.CENTER);
		style.setVerticalAlignment(VerticalAlignment.CENTER);
		style.setBorderTop(BorderStyle.THIN);
		style.setBorderBottom(BorderStyle.THIN);
		style.setBorderLeft(BorderStyle.THIN);
		style.setBorderRight(BorderStyle.THIN);
		return style;
	}

	private static CellStyle createDateStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		Font font = workbook.createFont();
		font.setItalic(true);
		style.setFont(font);
		return style;
	}

	private static CellStyle createDataStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		style.setBorderTop(BorderStyle.THIN);
		style.setBorderBottom(BorderStyle.THIN);
		style.setBorderLeft(BorderStyle.THIN);
		style.setBorderRight(BorderStyle.THIN);
		style.setVerticalAlignment(VerticalAlignment.CENTER);
		return style;
	}

	private static CellStyle createNumberStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		style.setBorderTop(BorderStyle.THIN);
		style.setBorderBottom(BorderStyle.THIN);
		style.setBorderLeft(BorderStyle.THIN);
		style.setBorderRight(BorderStyle.THIN);
		style.setVerticalAlignment(VerticalAlignment.CENTER);
		style.setAlignment(HorizontalAlignment.RIGHT);
		DataFormat format = workbook.createDataFormat();
		style.setDataFormat(format.getFormat("#,##0"));
		return style;
	}
}