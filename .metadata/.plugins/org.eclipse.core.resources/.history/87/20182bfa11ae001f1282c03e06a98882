package table;

import java.awt.*;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;

import bus.SanPhamBUS;
import entity.SanPham;
import style.CustomScrollBarUI;

public class TBL_SP {
	private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
	private static final Color CONTENT_COLOR = new Color(255, 192, 203);
	private static final Color HOVER_COLOR = new Color(252, 231, 243);
	private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
	private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);

	private JTable table;
	private DefaultTableModel tableModel;
	private SanPhamBUS sanPhamBUS;

	public TBL_SP() {
		sanPhamBUS = new SanPhamBUS();
	}

	public JPanel createTablePanel() {
		JPanel tablePanel = new JPanel(new BorderLayout(0, 15));
		tablePanel.setBackground(Color.WHITE);
		tablePanel.setBorder(new EmptyBorder(10, 0, 0, 0));

		String[] columns = { "Mã SP", "Tên sản phẩm", "Danh mục", "Số lượng tồn", "Giá nhập", "Giá bán", "Thương hiệu",
				"Tình trạng" };

		tableModel = new DefaultTableModel(columns, 0) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};

		table = new JTable(tableModel);
		setupTable();

		// Load data from database
		loadDataFromDB();
		CustomScrollBarUI customScrollBarUI = new CustomScrollBarUI();
		JScrollPane scrollPane =new JScrollPane();
		scrollPane.createVerticalScrollBar().setUI(customScrollBarUI);;
		tablePanel.add(scrollPane, BorderLayout.CENTER);

		return tablePanel;
	}

	private void loadDataFromDB() {
		tableModel.setRowCount(0); // Clear existing data

		try {
			ArrayList<SanPham> dsSanPham = sanPhamBUS.getAllSanPham();
			NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));

			for (SanPham sp : dsSanPham) {
				String giaNhap = currencyFormat.format(sp.getGiaNhap());
				String giaBan = currencyFormat.format(sp.getGiaBan());
				String tinhTrang = getTinhTrangText(sp.getSoLuongTonKho());

				Object[] row = { sp.getMaSP(), sp.getTenSP(), sp.getDanhmuc().getTenDM(), sp.getSoLuongTonKho(),
						giaNhap, giaBan, sp.getThuongHieu(), tinhTrang };
				tableModel.addRow(row);
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Lỗi tải dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
		}
	}

	private String getTinhTrangText(int soLuong) {
		if (soLuong <= 0)
			return "Hết hàng";
		if (soLuong <= 10)
			return "Sắp hết";
		return "Còn hàng";
	}

	private void setupTable() {
		table.setFont(CONTENT_FONT);
		table.setRowHeight(32);
		table.setGridColor(new Color(245, 245, 245));
		table.setSelectionBackground(HOVER_COLOR);
		table.setSelectionForeground(Color.BLACK);
		table.setIntercellSpacing(new Dimension(10, 10));
		table.setPreferredScrollableViewportSize(new Dimension(800, 400));
		table.setFillsViewportHeight(true);

		// Center align for numeric columns
		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);

		table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // Mã SP
		table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer); // Số lượng

		// Right align for currency columns
		DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
		rightRenderer.setHorizontalAlignment(JLabel.RIGHT);

		table.getColumnModel().getColumn(4).setCellRenderer(rightRenderer); // Giá nhập
		table.getColumnModel().getColumn(5).setCellRenderer(rightRenderer); // Giá bán

		setupHeader();
		setupStatusColumnRenderer();
	}
	private void setupStatusColumnRenderer() {
	    table.getColumnModel().getColumn(7).setCellRenderer(new DefaultTableCellRenderer() {
	        @Override
	        public Component getTableCellRendererComponent(JTable table, Object value,
	                boolean isSelected, boolean hasFocus, int row, int column) {
	                
	            // Get default settings
	            JLabel label = (JLabel) super.getTableCellRendererComponent(
	                table, value, isSelected, hasFocus, row, column);
	                
	            // Center text
	            label.setHorizontalAlignment(JLabel.CENTER);
	            label.setFont(CONTENT_FONT);
	            label.setBorder(new EmptyBorder(0, 5, 0, 5));

	            // Set colors based on status
	            if (value != null) {
	                String status = value.toString();
	                switch (status) {
	                    case "Còn hàng":
	                        label.setForeground(new Color(22, 163, 74)); // Green
	                        break;
	                    case "Sắp hết":
	                        label.setForeground(new Color(245, 158, 11)); // Orange
	                        break;
	                    case "Hết hàng":
	                        label.setForeground(new Color(220, 38, 38)); // Red
	                        break;
	                    default:
	                        label.setForeground(table.getForeground());
	                }
	            }

	            // Handle selection background
	            if (isSelected) {
	                label.setBackground(HOVER_COLOR);
	            } else {
	                label.setBackground(table.getBackground());
	            }
	            
	            // Make sure the background shows
	            label.setOpaque(true);
	            
	            return label;
	        }
	    });

	    // Set preferred width for status column
	    TableColumn statusColumn = table.getColumnModel().getColumn(7);
	    statusColumn.setPreferredWidth(100);
	    statusColumn.setMaxWidth(120);
	}F

	private void setupHeader() {
		JTableHeader header = table.getTableHeader();
		header.setFont(HEADER_FONT);
		header.setBackground(Color.WHITE);
		header.setForeground(Color.BLACK);
		header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
		header.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(230, 230, 230)));
	}

	// Rest of the methods remain the same...

	public void refreshData() {
		loadDataFromDB();
	}

	public JTable getTable() {
		return this.table;
	}

	public DefaultTableModel getTableModel() {
		return this.tableModel;
	}
}