package component;

import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import java.awt.Image;

public class ImageUploadUtil {
    private static final Logger LOGGER = Logger.getLogger(ImageUploadUtil.class.getName());
    private static final String IMAGE_DIRECTORY = "src/img_product";
    private static final String DEFAULT_IMAGE = "default-product.jpg";
    private static final long MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
    private static final String[] ALLOWED_EXTENSIONS = {".jpg", ".jpeg", ".png"};

    /**
     * Uploads a product image and returns the filename for database storage.
     * Creates the image directory if it doesn't exist.
     */
    public static String uploadProductImage(String sourcePath, String productId) throws IOException {
        // Validate input
        if (sourcePath == null || sourcePath.trim().isEmpty()) {
            LOGGER.warning("No image path provided, using default image");
            return DEFAULT_IMAGE;
        }

        File sourceFile = new File(sourcePath);
        if (!sourceFile.exists()) {
            LOGGER.warning("Source file does not exist: " + sourcePath);
            return DEFAULT_IMAGE;
        }

        try {
            // Validate the input file
            validateImageFile(sourceFile);

            // Create the image directory if it doesn't exist
            Files.createDirectories(Paths.get(IMAGE_DIRECTORY));

            // Get file extension from original file
            String extension = getFileExtension(sourceFile.getName());
            
            // Create filename using product ID (e.g., "SP001.jpg")
            String fileName = productId + extension;
            Path targetPath = Paths.get(IMAGE_DIRECTORY, fileName);

            // Copy file to destination
            Files.copy(sourceFile.toPath(), targetPath, StandardCopyOption.REPLACE_EXISTING);
            LOGGER.info("Successfully uploaded image: " + fileName);
            
            return fileName;
        } catch (Exception e) {
            LOGGER.severe("Failed to upload image: " + e.getMessage());
            return DEFAULT_IMAGE;
        }
    }

    /**
     * Updates a product's image, handling the old image deletion and new image upload safely
     */
    public static String updateProductImage(String newImagePath, String productId, String oldImageName) throws IOException {
        try {
            // If no new image is provided, keep the old one
            if (newImagePath == null || newImagePath.trim().isEmpty()) {
                return oldImageName != null ? oldImageName : DEFAULT_IMAGE;
            }

            // Delete old image if it exists and isn't the default
            if (oldImageName != null && !oldImageName.equals(DEFAULT_IMAGE)) {
                deleteProductImage(oldImageName);
            }

            // Upload new image
            return uploadProductImage(newImagePath, productId);
        } catch (Exception e) {
            LOGGER.severe("Error updating product image: " + e.getMessage());
            return oldImageName != null ? oldImageName : DEFAULT_IMAGE;
        }
    }

    /**
     * Validates the image file meets size and format requirements
     */
    private static void validateImageFile(File file) throws IllegalArgumentException {
        if (file == null || !file.exists()) {
            throw new IllegalArgumentException("File does not exist");
        }

        if (file.length() > MAX_FILE_SIZE) {
            throw new IllegalArgumentException("File size exceeds 5MB limit");
        }

        String extension = getFileExtension(file.getName()).toLowerCase();
        boolean isValidExtension = false;
        for (String allowedExt : ALLOWED_EXTENSIONS) {
            if (allowedExt.equalsIgnoreCase(extension)) {
                isValidExtension = true;
                break;
            }
        }

        if (!isValidExtension) {
            throw new IllegalArgumentException("Invalid file format. Allowed: JPG, JPEG, PNG");
        }
    }

    /**
     * Helper method to get file extension including the dot
     */
    private static String getFileExtension(String fileName) {
        int lastDot = fileName.lastIndexOf('.');
        return lastDot > 0 ? fileName.substring(lastDot) : "";
    }

    /**
     * Safely deletes a product image if it exists
     */
    public static boolean deleteProductImage(String fileName) {
        try {
            if (fileName == null || fileName.trim().isEmpty() || fileName.equals(DEFAULT_IMAGE)) {
                return false;
            }

            Path imagePath = Paths.get(IMAGE_DIRECTORY, fileName);
            return Files.deleteIfExists(imagePath);
        } catch (IOException e) {
            LOGGER.warning("Failed to delete image: " + fileName + " - " + e.getMessage());
            return false;
        }
    }

    /**
     * Loads and scales a product image for display
     */
    public static ImageIcon loadProductImage(String imageName, int width, int height) {
        if (imageName == null || imageName.trim().isEmpty()) {
            imageName = DEFAULT_IMAGE;
        }

        try {
            Path imagePath = Paths.get(IMAGE_DIRECTORY, imageName);
            if (!Files.exists(imagePath)) {
                imagePath = Paths.get(IMAGE_DIRECTORY, DEFAULT_IMAGE);
            }

            ImageIcon imageIcon = new ImageIcon(imagePath.toString());
            Image image = imageIcon.getImage();
            Image scaledImage = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
            return new ImageIcon(scaledImage);
        } catch (Exception e) {
            LOGGER.warning("Error loading product image: " + e.getMessage());
            return null;
        }
    }
}