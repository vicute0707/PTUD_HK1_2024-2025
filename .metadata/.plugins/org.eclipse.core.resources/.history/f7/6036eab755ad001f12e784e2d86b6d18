package export;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import javax.swing.*;
import javax.swing.table.TableModel;
import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ExcelExporterNV {
	private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-yyyy_HH-mm-ss");

	/**
	 * Exports table data to an Excel file
	 * 
	 * @param table           The JTable containing the data
	 * @param title           The title for the Excel sheet
	 * @param parentComponent The parent component for dialog boxes
	 */
	public static void exportToExcel(JTable table, String title, Component parentComponent) {
		try {
			// Create workbook and sheet
			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet sheet = workbook.createSheet(title);

			// Create header style
			XSSFCellStyle headerStyle = workbook.createCellStyle();
			headerStyle.setFillForegroundColor(IndexedColors.PINK.getIndex());
			headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			headerStyle.setAlignment(HorizontalAlignment.CENTER);

			XSSFFont headerFont = workbook.createFont();
			headerFont.setBold(true);
			headerFont.setColor(IndexedColors.WHITE.getIndex());
			headerStyle.setFont(headerFont);

			// Create title row
			Row titleRow = sheet.createRow(0);
			Cell titleCell = titleRow.createCell(0);
			titleCell.setCellValue("Báo cáo " + title);
			titleCell.setCellStyle(headerStyle);
			sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, table.getColumnCount() - 1));

			// Create date row
			Row dateRow = sheet.createRow(1);
			Cell dateCell = dateRow.createCell(0);
			dateCell.setCellValue("Ngày xuất: " + new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date()));
			sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, table.getColumnCount() - 1));

			// Create header row
			Row headerRow = sheet.createRow(2);
			TableModel model = table.getModel();

			for (int col = 0; col < model.getColumnCount(); col++) {
				Cell cell = headerRow.createCell(col);
				cell.setCellValue(model.getColumnName(col));
				cell.setCellStyle(headerStyle);
			}

			// Add data rows
			for (int row = 0; row < model.getRowCount(); row++) {
				Row dataRow = sheet.createRow(row + 3);
				for (int col = 0; col < model.getColumnCount(); col++) {
					Cell cell = dataRow.createCell(col);
					Object value = model.getValueAt(row, col);
					cell.setCellValue(value != null ? value.toString() : "");
				}
			}

			// Auto-size columns
			for (int col = 0; col < model.getColumnCount(); col++) {
				sheet.autoSizeColumn(col);
			}

			// Show file chooser dialog
			JFileChooser fileChooser = new JFileChooser();
			fileChooser.setDialogTitle("Chọn vị trí lưu file");
			String defaultFileName = title.toLowerCase().replace(" ", "_") + "_" + DATE_FORMAT.format(new Date())
					+ ".xlsx";
			fileChooser.setSelectedFile(new File(defaultFileName));

			if (fileChooser.showSaveDialog(parentComponent) == JFileChooser.APPROVE_OPTION) {
				File file = fileChooser.getSelectedFile();
				// Add .xlsx extension if not present
				if (!file.getName().toLowerCase().endsWith(".xlsx")) {
					file = new File(file.getAbsolutePath() + ".xlsx");
				}

				// Save the workbook
				try (FileOutputStream out = new FileOutputStream(file)) {
					workbook.write(out);
				}

				JOptionPane.showMessageDialog(parentComponent,
						"Xuất file Excel thành công!\nVị trí: " + file.getAbsolutePath(), "Thành công",
						JOptionPane.INFORMATION_MESSAGE);
			}

			workbook.close();

		} catch (Exception e) {
			JOptionPane.showMessageDialog(parentComponent, "Lỗi khi xuất file Excel: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
}