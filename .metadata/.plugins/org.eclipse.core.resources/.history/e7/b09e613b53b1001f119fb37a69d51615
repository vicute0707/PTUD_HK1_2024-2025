package gui;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;

import bus.ImportBUS;
import component.CreateDateChooser;
import component.SetupTable;
import dialog.ChiTietPhieuNhap;
import entity.Import;
import entity.User;
import entity.UserSession;
import service.PermissionChecker;
import style.CreateActionButton;
import style.CreateFilter;
import style.CustomScrollBarUI;
import style.StyleComboBox;
import style.StyleFormattedTextField;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Logger;

import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicScrollBarUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;

public class QuanLyNhapHang extends JPanel {
	// Constants
	private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
	private static final Color CONTENT_COLOR = new Color(255, 242, 242);
	private static final Color HOVER_COLOR = new Color(252, 231, 243);
	private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
	private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
	private static final Font TITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
	// Components
	private JTable table;
	private DefaultTableModel tableModel;
	private JTextField searchField;
	private JFormattedTextField fromAmountField;
	private JFormattedTextField toAmountField;
	private JDateChooser fromDateChooser;
	private JDateChooser toDateChooser;
	private JComboBox<String> supplierCombo;
	private JComboBox<String> employeeCombo;
	private JLabel totalRecordsValue;
	private JLabel totalAmountValue;
	private static final Logger LOGGER = Logger.getLogger(QuanLyNhapHang.class.getName());
	private ImportBUS importBUS;
	private static final SimpleDateFormat dateFormatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
	private static final NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();

	public QuanLyNhapHang() {
		importBUS = new ImportBUS();
		initializeComponents();
		setupLayout();
		loadData();
	}

	private void initializeComponents() {
		// Initialize labels first
		totalRecordsValue = new JLabel("0");
		totalRecordsValue.setFont(HEADER_FONT);
		totalRecordsValue.setForeground(PRIMARY_COLOR);
		totalAmountValue = new JLabel("0 VND");
		totalAmountValue.setFont(HEADER_FONT);
		totalAmountValue.setForeground(PRIMARY_COLOR);
		// Initialize table model
		String[] columns = { "Mã phiếu", "Nhà cung cấp", "Nhân viên nhập hàng", "Thời gian", "Tổng tiền" };
		tableModel = new DefaultTableModel(columns, 0) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};

		// Initialize table
		table = new JTable(tableModel);
		SetupTable setupTable = new SetupTable();
		setupTable.setupTable(table);

		// Initialize search components
		searchField = new JTextField();
		searchField.setPreferredSize(new Dimension(220, 35));
		searchField.setFont(CONTENT_FONT);

		// Initialize filter components
		initializeFilterComponents();
	}

	private void initializeFilterComponents() {
		// Initialize combo boxes
		supplierCombo = new JComboBox<>(
				new String[] { "Tất cả", "Xưởng may Đại Nam", "Xưởng may Hoàng Gia", "Công ty TNHH May Việt Tiến" });
		StyleComboBox styleComboBox = new StyleComboBox();
		styleComboBox.styleComboBox(supplierCombo);

		employeeCombo = new JComboBox<>(new String[] { "Tất cả", "Nguyễn Thị Tường Vi", "Trần Văn Nam", "Lê Thị Hoa" });
		styleComboBox.styleComboBox(employeeCombo);
		CreateDateChooser createDateChooser = new CreateDateChooser();
		// Initialize date choosers
		fromDateChooser = createDateChooser.createDateChooser();
		toDateChooser = createDateChooser.createDateChooser();

		// Initialize amount fields
		NumberFormat format = NumberFormat.getIntegerInstance();
		format.setGroupingUsed(true);
		fromAmountField = new JFormattedTextField(format);
		toAmountField = new JFormattedTextField(format);
		StyleFormattedTextField styleFomatText = new StyleFormattedTextField();
		styleFomatText.styleFormattedTextField(fromAmountField);
		styleFomatText.styleFormattedTextField(toAmountField);
	}

	private void setupLayout() {
		setLayout(new BorderLayout(0, 20));
		setBackground(Color.WHITE);
		setBorder(new EmptyBorder(30, 30, 30, 30));

		// Add main panels
		add(createTopPanel(), BorderLayout.NORTH);
		add(createFilterPanel(), BorderLayout.WEST);
		add(createMainPanel(), BorderLayout.CENTER);
	}

	private JPanel createTopPanel() {
		JPanel panel = new JPanel(new BorderLayout(20, 0));
		panel.setBackground(Color.WHITE);

		// Get current user for permission checking
		String currentUserId = UserSession.getInstance().getCurrentUser().getUserID();

		// Search panel
		JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
		searchPanel.setBackground(Color.WHITE);
		searchPanel.add(searchField);
		CreateFilter c = new CreateFilter();

		JButton searchButton = c.createSearchButton();
		configureButtonWithPermission(searchButton, currentUserId, PermissionChecker.PERM_ORDER_MANAGEMENT, () -> {
			String keyword = searchField.getText().trim();
			if (keyword.isEmpty()) {
				JOptionPane.showMessageDialog(this, "Vui lòng nhập từ khóa tìm kiếm!", "Thông báo",
						JOptionPane.WARNING_MESSAGE);
				return;
			}
		});
		searchButton.addActionListener(e -> {
			if (searchField.getText().trim().isEmpty()) {
				JOptionPane.showMessageDialog(this, "Vui lòng nhập từ khóa tìm kiếm!", "Thông báo",
						JOptionPane.WARNING_MESSAGE);
				return;
			}
			performSearch();
		});

		searchPanel.add(searchButton);
		JButton refreshButton = new JButton("Làm mới");
		refreshButton.setFont(CONTENT_FONT);
		refreshButton.setBackground(Color.WHITE);
		refreshButton.setForeground(PRIMARY_COLOR);
		refreshButton.setBorder(BorderFactory.createLineBorder(PRIMARY_COLOR));
		refreshButton.setPreferredSize(new Dimension(100, 35));
		refreshButton.setCursor(new Cursor(Cursor.HAND_CURSOR));

		refreshButton.addMouseListener(new MouseAdapter() {
			public void mouseEntered(MouseEvent e) {
				refreshButton.setBackground(HOVER_COLOR);
			}

			public void mouseExited(MouseEvent e) {
				refreshButton.setBackground(Color.WHITE);
			}
		});

		configureButtonWithPermission(refreshButton, UserSession.getInstance().getCurrentUser().getUserID(),
				PermissionChecker.PERM_ORDER_MANAGEMENT, this::refreshSearchResults);
		searchPanel.add(refreshButton);
		// Action buttons panel
		JPanel actionPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
		actionPanel.setBackground(Color.WHITE);
		CreateActionButton createActionButton = new CreateActionButton();

		// Add Import Button
		JButton addButton = createActionButton.createActionButton("Thêm phiếu nhập", "/icon/circle-plus.png", true,
				true);
		configureButtonWithPermission(addButton, currentUserId, PermissionChecker.PERM_ORDER_MANAGEMENT, () -> {
			Container mainContent = QuanLyNhapHang.this.getParent();
			mainContent.removeAll();
			ThemDonNhap addPanel = new ThemDonNhap();
			mainContent.add(addPanel, BorderLayout.CENTER);
			mainContent.revalidate();
			mainContent.repaint();
		});
		addButton.setPreferredSize(new Dimension(160, 38));

		// Delete Button
		JButton deleteButton = createActionButton.createActionButton("Xóa", "/icon/trash.png", true, false);
		configureButtonWithPermission(deleteButton, currentUserId, PermissionChecker.PERM_ORDER_MANAGEMENT, () -> {
			handleDelete();
		});

		// Info Button
		JButton aboutButton = createActionButton.createActionButton("About", "/icon/info.png", true, false);
		configureButtonWithPermission(aboutButton, currentUserId, PermissionChecker.PERM_ORDER_MANAGEMENT, () -> {
			ChiTietPhieuNhap chiTietPhieuNhap = new ChiTietPhieuNhap();
			chiTietPhieuNhap.chiTietPhieuNhap(table, tableModel);
		});

		// Export Button
		JButton exportButton = createActionButton.createActionButton("Xuất Excel", "/icon/printer.png", true, false);
		configureButtonWithPermission(exportButton, currentUserId, PermissionChecker.PERM_REPORT, () -> {
			handleExport();
		});
		exportButton.setPreferredSize(new Dimension(160, 38));

		actionPanel.add(addButton);
		actionPanel.add(deleteButton);
		actionPanel.add(aboutButton);
		actionPanel.add(exportButton);

		panel.add(searchPanel, BorderLayout.WEST);
		panel.add(actionPanel, BorderLayout.EAST);

		return panel;
	}

	private void performSearch() {
		String keyword = searchField.getText().trim().toLowerCase();

		try {
			// Reset to original data if search field is empty
			if (keyword.isEmpty()) {
				refreshSearchResults();
				return;
			}

			// Get the current table model
			DefaultTableModel currentModel = (DefaultTableModel) table.getModel();
			currentModel.setRowCount(0); // Clear current data

			// Get fresh data from BUS layer
			java.util.List<Import> imports = importBUS.getAllImports();
			double totalAmount = 0;
			int matchCount = 0;

			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
			NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));

			// Filter and add matching records
			for (Import importObj : imports) {
				if (containsKeyword(importObj, keyword)) {
					Object[] row = { importObj.getImportID(), importObj.getSupplier(), importObj.getStaff(),
							dateFormat.format(importObj.getImportDate()),
							currencyFormat.format(importObj.getTotalAmount()) };
					currentModel.addRow(row);
					totalAmount += importObj.getTotalAmount();
					matchCount++;
				}
			}

			// Update summary information
			totalRecordsValue.setText(String.valueOf(matchCount));
			totalAmountValue.setText(currencyFormat.format(totalAmount));

			if (matchCount == 0) {
				JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả nào phù hợp với từ khóa: " + keyword,
						"Thông báo", JOptionPane.INFORMATION_MESSAGE);
			}

			LOGGER.info("Found " + matchCount + " matching records for keyword: " + keyword);

		} catch (Exception e) {
			LOGGER.severe("Error during search: " + e.getMessage());
			JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private boolean containsKeyword(Import importObj, String keyword) {
		return importObj.getImportID().toLowerCase().contains(keyword)
				|| importObj.getSupplier().toLowerCase().contains(keyword)
				|| importObj.getStaff().toLowerCase().contains(keyword)
				|| String.valueOf(importObj.getTotalAmount()).contains(keyword);
	}

	private void refreshSearchResults() {
		try {
			// Clear the search field
			searchField.setText("");

			// Get the current table model
			DefaultTableModel currentModel = (DefaultTableModel) table.getModel();
			currentModel.setRowCount(0); // Clear current data

			// Get fresh data from BUS layer
			java.util.List<Import> imports = importBUS.getAllImports();
			double totalAmount = 0;

			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
			NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));

			// Add all records
			for (Import importObj : imports) {
				Object[] row = { importObj.getImportID(), importObj.getSupplier(), importObj.getStaff(),
						dateFormat.format(importObj.getImportDate()),
						currencyFormat.format(importObj.getTotalAmount()) };
				currentModel.addRow(row);
				totalAmount += importObj.getTotalAmount();
			}

			// Update summary information
			totalRecordsValue.setText(String.valueOf(imports.size()));
			totalAmountValue.setText(currencyFormat.format(totalAmount));

			LOGGER.info("Data refreshed successfully. Total records: " + imports.size());

		} catch (Exception e) {
			LOGGER.severe("Error refreshing data: " + e.getMessage());
			JOptionPane.showMessageDialog(this, "Lỗi khi làm mới dữ liệu: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private void setupTableUI() {
		// Set up table appearance
		table.setFont(CONTENT_FONT);
		table.setRowHeight(35);
		table.setGridColor(new Color(230, 230, 230));

		// Set up header
		JTableHeader header = table.getTableHeader();
		header.setFont(HEADER_FONT);
		header.setBackground(Color.WHITE);
		header.setForeground(Color.BLACK);

		// Set up cell renderers
		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);

		// Apply renderers to columns
		for (int i = 0; i < table.getColumnCount(); i++) {
			table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
		}

		// Add double-click listener for viewing details
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2) {
					int selectedRow = table.getSelectedRow();
					if (selectedRow != -1) {
						// Create detail table model
						DefaultTableModel detailModel = createDetailTableModel(
								table.getValueAt(selectedRow, 0).toString() // Pass the import ID
						);

						// Show detail dialog
						ChiTietPhieuNhap detailDialog = new ChiTietPhieuNhap();
						detailDialog.chiTietPhieuNhap(table, detailModel);
					}
				}
			}
		});
	}

	private DefaultTableModel createDetailTableModel(String importId) {
		DefaultTableModel detailModel = new DefaultTableModel(
				new String[] { "Mã SP", "Tên sản phẩm", "Phân loại", "Đơn giá", "Số lượng", "Thành tiền" }, 0) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};

		// This is sample data - in a real application, you would fetch this from your
		// database
		detailModel.addRow(new Object[] { "SP001", "Áo thun nam", "Size L - Màu đen", "150,000đ", "10", "1,500,000đ" });
		detailModel
				.addRow(new Object[] { "SP002", "Áo sơ mi nữ", "Size M - Màu trắng", "200,000đ", "5", "1,000,000đ" });
		detailModel.addRow(new Object[] { "SP003", "Quần jean", "Size 32 - Màu xanh", "350,000đ", "8", "2,800,000đ" });

		return detailModel;
	}

	private void configureButtonWithPermission(JButton button, String userId, String permission, Runnable action) {
		if (PermissionChecker.hasPermission(userId, permission)) {
			button.setEnabled(true);
			button.addActionListener(e -> {
				if (button.isEnabled()) {
					action.run();
				}
			});
		} else {
			button.setEnabled(false);
			String permissionDesc = PermissionChecker.getPermissionDescription(permission);
			button.setToolTipText("Bạn không có quyền " + permissionDesc);
			LOGGER.warning("User " + userId + " attempted to access feature requiring " + permissionDesc);
		}
	}

	private void handleDelete() {

	}

	private void handleExport() {
		try {
			JFileChooser fileChooser = new JFileChooser();
			fileChooser.setDialogTitle("Xuất danh sách phiếu nhập");
			fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			fileChooser.setSelectedFile(new File("PhieuNhap.xlsx"));

			if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
				String filePath = fileChooser.getSelectedFile().getAbsolutePath();
				if (!filePath.endsWith(".xlsx")) {
					filePath += ".xlsx";
				}
				// Implement actual export logic here
				LOGGER.info("Exporting import orders to: " + filePath);
				JOptionPane.showMessageDialog(this, "Xuất file thành công: " + filePath, "Thông báo",
						JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			LOGGER.severe("Error exporting file: " + e.getMessage());
			JOptionPane.showMessageDialog(this, "Lỗi khi xuất file: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private JPanel createFilterPanel() {
		JPanel filterPanel = new JPanel();
		filterPanel.setLayout(new BoxLayout(filterPanel, BoxLayout.Y_AXIS));
		filterPanel.setBackground(CONTENT_COLOR);
		filterPanel.setBorder(BorderFactory.createCompoundBorder(new EmptyBorder(0, 0, 0, 0), BorderFactory
				.createCompoundBorder(new LineBorder(PRIMARY_COLOR, 0, true), new EmptyBorder(20, 20, 20, 20))));
		filterPanel.setPreferredSize(new Dimension(350, 0));

		// Create filter components
		CreateFilter createFilter = new CreateFilter();

		// Thêm title
		filterPanel.add(createFilter.createFilterTitle());
		filterPanel.add(Box.createVerticalStrut(20));

		// Nhà cung cấp combobox
		filterPanel.add(createFilter.createFilterField("Nhà cung cấp", supplierCombo));
		filterPanel.add(Box.createVerticalStrut(15));

		// Nhân viên combobox
		filterPanel.add(createFilter.createFilterField("Nhân viên tiếp nhận", employeeCombo));
		filterPanel.add(Box.createVerticalStrut(15));

		// Add filter button
		JButton filterButton = new JButton("Lọc");
		filterButton.setFont(CONTENT_FONT);
		filterButton.setBackground(PRIMARY_COLOR);
		filterButton.setForeground(Color.WHITE);
		filterButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
		filterButton.addActionListener(e -> filterData());

		// Add reset button
		JButton resetButton = new JButton("Đặt lại");
		resetButton.setFont(CONTENT_FONT);
		resetButton.setBackground(Color.WHITE);
		resetButton.setForeground(PRIMARY_COLOR);
		resetButton.setBorder(BorderFactory.createLineBorder(PRIMARY_COLOR));
		resetButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
		resetButton.addActionListener(e -> {
			employeeCombo.setSelectedItem("Tất cả");
			supplierCombo.setSelectedItem("Tất cả");
			refreshSearchResults();
		});

		// Button panel
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
		buttonPanel.setBackground(CONTENT_COLOR);
		buttonPanel.add(filterButton);
		buttonPanel.add(resetButton);

		filterPanel.add(buttonPanel);

		return filterPanel;
	}

	private void loadEmployeeComboBox() {
		try {
			// Lấy danh sách nhân viên từ BUS
			java.util.List<User> employees = importBUS.getAllEmployees();

			// Thêm item mặc định
			employeeCombo.addItem("Tất cả");

			// Thêm tên nhân viên vào combobox
			for (User emp : employees) {
				employeeCombo.addItem(emp.getFullName());
			}

			LOGGER.info("Loaded " + employees.size() + " employees to combo box");
		} catch (Exception e) {
			LOGGER.severe("Error loading employees: " + e.getMessage());
			JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách nhân viên: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	// Method lọc dữ liệu
	private void filterData() {
		try {
			String selectedEmployee = employeeCombo.getSelectedItem().toString();
			String selectedSupplier = supplierCombo.getSelectedItem().toString();

			// Reset table
			DefaultTableModel model = (DefaultTableModel) table.getModel();
			model.setRowCount(0);

			// Lấy tất cả dữ liệu
			java.util.List<Import> imports = importBUS.getAllImports();
			double totalAmount = 0;
			int recordCount = 0;

			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
			NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));

			// Lọc và thêm vào bảng
			for (Import importObj : imports) {
				boolean employeeMatch = selectedEmployee.equals("Tất cả")
						|| importObj.getStaff().equals(selectedEmployee);
				boolean supplierMatch = selectedSupplier.equals("Tất cả")
						|| importObj.getSupplier().equals(selectedSupplier);

				if (employeeMatch && supplierMatch) {
					Object[] row = { importObj.getImportID(), importObj.getSupplier(), importObj.getStaff(),
							dateFormat.format(importObj.getImportDate()),
							currencyFormat.format(importObj.getTotalAmount()) };
					model.addRow(row);
					totalAmount += importObj.getTotalAmount();
					recordCount++;
				}
			}

			// Cập nhật thông tin tổng
			totalRecordsValue.setText(String.valueOf(recordCount));
			totalAmountValue.setText(currencyFormat.format(totalAmount));

			LOGGER.info("Filtered data: " + recordCount + " records found");

		} catch (Exception e) {
			LOGGER.severe("Error filtering data: " + e.getMessage());
			JOptionPane.showMessageDialog(this, "Lỗi khi lọc dữ liệu: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private JPanel createMainPanel() {
		JPanel mainPanel = new JPanel(new BorderLayout(0, 20));
		mainPanel.setBackground(Color.WHITE);

		// Create scroll pane for table
		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.getViewport().setBackground(Color.WHITE);
		scrollPane.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));

		// Tùy chỉnh thanh cuộn dọc
		JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
		CustomScrollBarUI customScrollBarUI = new CustomScrollBarUI();
		verticalScrollBar.setUI(customScrollBarUI);

		// Tùy chỉnh thanh cuộn ngang
		JScrollBar horizontalScrollBar = scrollPane.getHorizontalScrollBar();
		horizontalScrollBar.setUI(customScrollBarUI);

		// Add components
		mainPanel.add(scrollPane, BorderLayout.CENTER);
		mainPanel.add(createSummaryPanel(), BorderLayout.SOUTH);

		return mainPanel;
	}

	private JPanel createSummaryPanel() {
		JPanel panel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 20, 10));
		panel.setBackground(Color.WHITE);
		panel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(230, 230, 230)));

		JLabel totalRecordsLabel = new JLabel("Tổng số phiếu: ");
		totalRecordsLabel.setFont(CONTENT_FONT);

		JLabel totalAmountLabel = new JLabel("Tổng tiền: ");
		totalAmountLabel.setFont(CONTENT_FONT);

		panel.add(totalRecordsLabel);
		panel.add(totalRecordsValue);
		panel.add(Box.createHorizontalStrut(20));
		panel.add(totalAmountLabel);
		panel.add(totalAmountValue);

		return panel;
	}

	private JPanel createAmountFilterPanel() {
		JPanel panel = new JPanel();
		panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
		panel.setBackground(CONTENT_COLOR);
		panel.setAlignmentX(Component.CENTER_ALIGNMENT);

		JLabel titleLabel = new JLabel("Khoảng tiền (VND)");
		titleLabel.setFont(CONTENT_FONT);
		titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
		panel.add(titleLabel);
		panel.add(Box.createVerticalStrut(12));

		JPanel fieldsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
		fieldsPanel.setBackground(CONTENT_COLOR);

		fromAmountField.setPreferredSize(new Dimension(120, 35));
		toAmountField.setPreferredSize(new Dimension(120, 35));

		fieldsPanel.add(fromAmountField);
		fieldsPanel.add(new JLabel("—"));
		fieldsPanel.add(toAmountField);

		panel.add(fieldsPanel);
		return panel;
	}

	private void loadData() {
		try {
			// Clear existing table data
			tableModel.setRowCount(0);

			// Get all imports from BUS layer
			java.util.List<Import> imports = importBUS.getAllImports();
			double totalAmount = 0;

			// Format for date and currency
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
			NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));

			// Add each import to the table
			for (Import importObj : imports) {
				Object[] row = { importObj.getImportID(), importObj.getSupplier(), importObj.getStaff(),
						dateFormat.format(importObj.getImportDate()),
						currencyFormat.format(importObj.getTotalAmount()) };
				tableModel.addRow(row);
				totalAmount += importObj.getTotalAmount();
			}

			// Update summary labels
			totalRecordsValue.setText(String.valueOf(imports.size()));
			totalAmountValue.setText(currencyFormat.format(totalAmount));

			LOGGER.info("Successfully loaded " + imports.size() + " import orders");

		} catch (Exception e) {
			LOGGER.severe("Error loading import data: " + e.getMessage());
			JOptionPane.showMessageDialog(this, "Lỗi khi tải dữ liệu: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
	}

}