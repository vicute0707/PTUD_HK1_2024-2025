package dialog;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;

import bus.ImportBUS;
import style.StyleButton;

public class ChiTietPhieuNhap extends JDialog {
	private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
	private static final Color CONTENT_COLOR = new Color(255, 242, 242);
	private static final Color HOVER_COLOR = new Color(252, 231, 243);
	private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 14);
	private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
	private static final Font TITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 16);
    private ImportBUS importBUS;
    private static final Logger LOGGER = Logger.getLogger(ChiTietPhieuNhap.class.getName());

    public ChiTietPhieuNhap() {
        importBUS = new ImportBUS();
	}
	public void chiTietPhieuNhap(JTable table, DefaultTableModel detailModel) {
		 int selectedRow = table.getSelectedRow();
	        if (selectedRow == -1) {
	            JOptionPane.showMessageDialog(this, "Vui lòng chọn phiếu nhập cần xem chi tiết!", "Thông báo",
	                    JOptionPane.WARNING_MESSAGE);
	            return;
	        }

	        try {
	            // Lấy mã phiếu nhập và truy vấn chi tiết từ database
	            String importId = table.getValueAt(selectedRow, 0).toString();
	            List<ImportDetail> details = importBUS.getImportDetailsByImportId(importId);

	            // Tạo model mới cho bảng chi tiết
	            String[] columns = {"Mã SP", "Tên sản phẩm", "Phân loại", "Đơn giá", "Số lượng", "Thành tiền"};
	            detailModel = new DefaultTableModel(columns, 0) {
	                @Override
	                public boolean isCellEditable(int row, int column) {
	                    return false;
	                }
	            };

	            // Format số tiền
	            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));

	            // Thêm dữ liệu vào model
	            for (ImportDetail detail : details) {
	                double totalAmount = detail.getQuantity() * detail.getPrice();
	                Object[] row = {
	                    detail.getVariantID(),
	                    detail.getProductName(),
	                    detail.getVariantName(),
	                    currencyFormat.format(detail.getPrice()),
	                    detail.getQuantity(),
	                    currencyFormat.format(totalAmount)
	                };
	                detailModel.addRow(row);
	            }

	            // Tiếp tục sử dụng code giao diện hiện tại
	            JDialog detailDialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Chi tiết phiếu nhập", true);
	            detailDialog.setLayout(new BorderLayout());

	            // Sử dụng lại các phương thức hiện có để tạo giao diện
	            JPanel contentPanel = createContentPanel(table, selectedRow);
	            JTable detailTable = new JTable(detailModel);
	            setupDetailTable(detailTable);
	            
	            // Thêm các components vào dialog như cũ
	            // (giữ nguyên phần code giao diện còn lại)
	            
	            LOGGER.info("Loaded details for import " + importId);

	        } catch (Exception e) {
	            LOGGER.severe("Error loading import details: " + e.getMessage());
	            JOptionPane.showMessageDialog(this,
	                "Lỗi khi tải chi tiết phiếu nhập: " + e.getMessage(),
	                "Lỗi",
	                JOptionPane.ERROR_MESSAGE);
	        }
	    }

		JTable detailTable = new JTable(detailModel);
		setupDetailTable(detailTable);
		

		// Tạo scroll pane cho bảng
		JScrollPane scrollPane = new JScrollPane(detailTable);
		scrollPane.setBorder(BorderFactory.createLineBorder(new Color(230, 230, 230)));

		// Style scroll pane
		scrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
			@Override
			protected void configureScrollBarColors() {
				this.thumbColor = PRIMARY_COLOR;
				this.trackColor = new Color(245, 245, 245);
			}

		});

		// Thêm các components vào panel chính
		contentPanel.add(infoPanel);
		contentPanel.add(Box.createVerticalStrut(20));

		// Label cho bảng chi tiết
		JLabel detailLabel = new JLabel("Chi tiết sản phẩm");
		detailLabel.setFont(HEADER_FONT);

		detailLabel.setForeground(PRIMARY_COLOR);
		contentPanel.add(detailLabel);
		contentPanel.add(Box.createVerticalStrut(10));
		contentPanel.add(scrollPane);

		// Panel chứa các nút
		JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
		buttonPanel.setBackground(Color.WHITE);

		// Nút in phiếu
		JButton printButton = new JButton("In phiếu");
		StyleButton stButton = new StyleButton();
		stButton.styleButton(printButton, true);
		

		// Nút đóng
		JButton closeButton = new JButton("Đóng");
		StyleButton styleButton = new StyleButton();
		styleButton.styleButton(closeButton, false);
		closeButton.addActionListener(evt -> detailDialog.dispose());

		buttonPanel.add(printButton);
		buttonPanel.add(closeButton);

		// Thêm vào dialog
		detailDialog.add(contentPanel, BorderLayout.CENTER);
		detailDialog.add(buttonPanel, BorderLayout.SOUTH);

		// Cài đặt dialog
		detailDialog.setSize(800, 600);
		detailDialog.setLocationRelativeTo(this);
		detailDialog.setVisible(true);
	}

	private void addDetailField(JPanel panel, String label, String value, GridBagConstraints gbc, int row) {
		gbc.gridy = row;

		// Label
		gbc.gridx = 0;
		JLabel lblField = new JLabel(label);
		lblField.setFont(CONTENT_FONT);
		panel.add(lblField, gbc);

		// Value
		gbc.gridx = 1;
		JLabel lblValue = new JLabel(value);
		lblValue.setFont(CONTENT_FONT);
		panel.add(lblValue, gbc);
	}

	private void setupDetailTable(JTable table) {
		table.setFont(CONTENT_FONT);
		table.setRowHeight(35);
		table.setGridColor(new Color(230, 230, 230));
		table.setShowVerticalLines(true);
		table.setShowHorizontalLines(true);

		// Setup header
		JTableHeader header = table.getTableHeader();
		header.setFont(HEADER_FONT);
		header.setBackground(Color.WHITE);
		header.setForeground(Color.BLACK);
		header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));

		// Setup cell renderers
		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);

		DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
		rightRenderer.setHorizontalAlignment(JLabel.RIGHT);

		// Áp dụng cell renderer
		table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // Mã SP
		table.getColumnModel().getColumn(3).setCellRenderer(rightRenderer); // Đơn giá
		table.getColumnModel().getColumn(4).setCellRenderer(centerRenderer); // Số lượng
		table.getColumnModel().getColumn(5).setCellRenderer(rightRenderer); // Thành tiền
	}

}