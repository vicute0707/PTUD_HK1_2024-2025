package dao;

import entity.SanPham;
import entity.DanhMuc;
import connection.MyConnection;
import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

public class SanPhamDAO {
	private static final Logger LOGGER = Logger.getLogger(SanPhamDAO.class.getName());
	private MyConnection myConnection;

	public SanPhamDAO() {
		myConnection = new MyConnection();
	}

	public ArrayList<SanPham> getAllSanPham() {
		ArrayList<SanPham> dsSanPham = new ArrayList<>();
		String sql = """
				SELECT p.*, c.name as category_name
				FROM product p
				LEFT JOIN category c ON p.category = c.categoryID
				WHERE p.status = 'active'
				ORDER BY p.productID
				""";

		try (Connection conn = myConnection.connect();
				PreparedStatement pst = conn.prepareStatement(sql);
				ResultSet rs = pst.executeQuery()) {

			while (rs.next()) {
				SanPham sp = new SanPham();

				// Set thông tin cơ bản
				sp.setMaSP(rs.getString("productID"));
				sp.setTenSP(rs.getString("name"));
				sp.setSoLuongTonKho(rs.getInt("stockQuantity"));
				sp.setGiaNhap(rs.getDouble("importPrice"));
				sp.setGiaBan(rs.getDouble("sellPrice"));
				sp.setThuongHieu(rs.getString("brand"));
				sp.setHinhAnh(rs.getString("imagePath"));

				// Xử lý tình trạng dựa vào số lượng tồn
				int soLuong = rs.getInt("stockQuantity");
				sp.setTinhtrang(getTinhTrangText(soLuong));

				// Set danh mục
				DanhMuc dm = new DanhMuc();
				dm.setMaDM(rs.getString("category"));
				dm.setTenDM(rs.getString("category_name"));
				sp.setDanhmuc(dm);

				dsSanPham.add(sp);
			}
			LOGGER.info("Đã lấy " + dsSanPham.size() + " sản phẩm từ database");
			return dsSanPham;

		} catch (SQLException e) {
			LOGGER.severe("Lỗi khi lấy danh sách sản phẩm: " + e.getMessage());
			return new ArrayList<>();
		}
	}

	public boolean addSanPham(SanPham sp) {
		String sql = "CALL sp_AddProduct(?, ?, ?, ?, ?, ?, ?)";

		try (Connection conn = myConnection.connect(); CallableStatement cs = conn.prepareCall(sql)) {

			cs.setString(1, sp.getMaSP());
			cs.setString(2, sp.getTenSP());
			cs.setString(3, sp.getDanhmuc().getMaDM());
			cs.setDouble(4, sp.getGiaNhap());
			cs.setDouble(5, sp.getGiaBan());
			cs.setString(6, sp.getThuongHieu());
			cs.setString(7, sp.getHinhAnh());

			boolean result = cs.executeUpdate() > 0;
			LOGGER.info("Thêm sản phẩm " + (result ? "thành công" : "thất bại") + ": " + sp.getMaSP());
			return result;

		} catch (SQLException e) {
			LOGGER.severe("Lỗi thêm sản phẩm: " + e.getMessage());
			return false;
		}
	}

	public boolean updateSanPham(SanPham sp) {
		String sql = "CALL sp_UpdateProduct(?, ?, ?, ?, ?, ?, ?, ?)";

		try (Connection conn = myConnection.connect(); CallableStatement cs = conn.prepareCall(sql)) {

			cs.setString(1, sp.getMaSP());
			cs.setString(2, sp.getTenSP());
			cs.setString(3, sp.getDanhmuc().getMaDM());
			cs.setDouble(4, sp.getGiaNhap());
			cs.setDouble(5, sp.getGiaBan());
			cs.setString(6, sp.getThuongHieu());
			cs.setString(7, sp.getHinhAnh());
			cs.setString(8, "active");

			boolean result = cs.executeUpdate() > 0;
			LOGGER.info("Cập nhật sản phẩm " + (result ? "thành công" : "thất bại") + ": " + sp.getMaSP());
			return result;

		} catch (SQLException e) {
			LOGGER.severe("Lỗi cập nhật sản phẩm: " + e.getMessage());
			return false;
		}
	}

	public boolean deleteSanPham(String maSP) {
		String sql = "CALL sp_DeleteProduct(?)";

		try (Connection conn = myConnection.connect(); CallableStatement cs = conn.prepareCall(sql)) {

			cs.setString(1, maSP);
			boolean result = cs.executeUpdate() > 0;
			LOGGER.info("Xóa sản phẩm " + (result ? "thành công" : "thất bại") + ": " + maSP);
			return result;

		} catch (SQLException e) {
			LOGGER.severe("Lỗi xóa sản phẩm: " + e.getMessage());
			return false;
		}
	}

	// Tìm kiếm theo các tiêu chí
	public ArrayList<SanPham> timKiemSanPham(String tuKhoa, String loaiTim) {
		ArrayList<SanPham> ketQua = new ArrayList<>();
		String sql = buildSearchQuery(loaiTim);

		try (Connection conn = myConnection.connect(); PreparedStatement pst = conn.prepareStatement(sql)) {

			pst.setString(1, "%" + tuKhoa + "%");
			ResultSet rs = pst.executeQuery();

			while (rs.next()) {
				SanPham sp = createSanPhamFromResultSet(rs);
				ketQua.add(sp);
			}
			LOGGER.info("Tìm thấy " + ketQua.size() + " sản phẩm với từ khóa: " + tuKhoa);
			return ketQua;

		} catch (SQLException e) {
			LOGGER.severe("Lỗi tìm kiếm sản phẩm: " + e.getMessage());
			return new ArrayList<>();
		}
	}

	private String buildSearchQuery(String loaiTim) {
		String baseQuery = """
				SELECT p.*, c.name as category_name
				FROM product p
				LEFT JOIN category c ON p.category = c.categoryID
				WHERE p.status = 'active' AND
				""";

		return baseQuery + switch (loaiTim) {
		case "Theo Mã" -> "p.productID LIKE ?";
		case "Tên SP" -> "p.name LIKE ?";
		case "Tên DM" -> "c.name LIKE ?";
		case "Thương Hiệu" -> "p.brand LIKE ?";
		default -> "p.name LIKE ?";
		};
	}

	private SanPham createSanPhamFromResultSet(ResultSet rs) throws SQLException {
		SanPham sp = new SanPham();
		sp.setMaSP(rs.getString("productID"));
		sp.setTenSP(rs.getString("name"));
		sp.setSoLuongTonKho(rs.getInt("stockQuantity"));
		sp.setGiaNhap(rs.getDouble("importPrice"));
		sp.setGiaBan(rs.getDouble("sellPrice"));
		sp.setThuongHieu(rs.getString("brand"));
		sp.setLinhAnh(rs.getString("imagePath"));

		DanhMuc dm = new DanhMuc();
		dm.setMaDM(rs.getString("category"));
		dm.setTenDM(rs.getString("category_name"));
		sp.setDanhmuc(dm);

		sp.setTinhtrang(getTinhTrangText(rs.getInt("stockQuantity")));

		return sp;
	}

	private String getTinhTrangText(int soLuong) {
		if (soLuong <= 0)
			return "Hết hàng";
		if (soLuong <= 10)
			return "Sắp hết";
		return "Còn hàng";
	}

	public String getLastProductId() {
		String sql = "SELECT productID FROM product ORDER BY productID DESC LIMIT 1";

		try (Connection conn = myConnection.connect();
				PreparedStatement pst = conn.prepareStatement(sql);
				ResultSet rs = pst.executeQuery()) {

			if (rs.next()) {
				return rs.getString("productID");
			}
			return "PRD000";

		} catch (SQLException e) {
			LOGGER.severe("Lỗi lấy mã sản phẩm cuối cùng: " + e.getMessage());
			return "PRD000";
		}
	}
}