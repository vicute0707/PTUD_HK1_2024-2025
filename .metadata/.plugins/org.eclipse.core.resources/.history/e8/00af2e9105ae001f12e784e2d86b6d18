package gui;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.*;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;

import bus.DanhMucBUS;
import entity.DanhMuc;
import entity.NhaCC;
import entity.SanPham;
import entity.UserSession;
import service.PermissionChecker;

public class Form_DanhMuc extends JPanel {
	private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
	private static final Color CONTENT_COLOR = new Color(255, 192, 203);
	private static final Color HOVER_COLOR = new Color(252, 231, 243);
	private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
	private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
	private static final Font TITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 14);

	private int selectedRow = -1;
	private JTable table;
	private DefaultTableModel tableModel;
	private JTextField searchField;
	private JPanel rightPanel;
	private JPanel productsPanel;
	private static final Logger LOGGER = Logger.getLogger(Form_DanhMuc.class.getName());
	private DanhMucBUS danhMucBUS;

	private class ImagePanel extends JPanel {
		private Image image;
		private int width;
		private int height;

		public ImagePanel(String imagePath, int width, int height) {
			this.width = width;
			this.height = height;
			try {
				image = new ImageIcon(getClass().getResource(imagePath)).getImage().getScaledInstance(width, height,
						Image.SCALE_SMOOTH);
			} catch (Exception e) {
				image = createDefaultImage(width, height);
			}
			setPreferredSize(new Dimension(width, height));
		}

		private Image createDefaultImage(int width, int height) {
			BufferedImage defaultImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
			Graphics2D g2d = defaultImage.createGraphics();
			g2d.setColor(new Color(240, 240, 240));
			g2d.fillRect(0, 0, width, height);
			g2d.setColor(Color.GRAY);
			g2d.drawRect(0, 0, width - 1, height - 1);
			g2d.drawString("No Image", width / 4, height / 2);
			g2d.dispose();
			return defaultImage;
		}

		@Override
		protected void paintComponent(Graphics g) {
			super.paintComponent(g);
			if (image != null) {
				int x = (getWidth() - width) / 2;
				int y = (getHeight() - height) / 2;
				g.drawImage(image, x, y, null);
			}
		}
	}

	public Form_DanhMuc() {
		danhMucBUS = new DanhMucBUS();
		initComponents();
		danhMucBUS.hienThiDanhMuc(tableModel);
	}

	private void initComponents() {
		setLayout(new BorderLayout(10, 0));
		setBackground(Color.WHITE);
		setBorder(new EmptyBorder(30, 30, 30, 30));

		// Tạo panel chính chứa table
		JPanel mainPanel = new JPanel(new BorderLayout(20, 0));
		mainPanel.setBackground(Color.WHITE);
		mainPanel.setPreferredSize(new Dimension(getWidth() * 7 / 10, getHeight()));

		// Panel bên trái chứa danh mục
		JPanel leftPanel = new JPanel(new BorderLayout(0, 20));
		leftPanel.setBackground(Color.WHITE);

		leftPanel.add(createTopPanel(), BorderLayout.NORTH);
		leftPanel.add(createTablePanel(), BorderLayout.CENTER);
		mainPanel.add(leftPanel, BorderLayout.CENTER);

		// Panel bên phải để hiển thị sản phẩm
		rightPanel = new JPanel(new BorderLayout());
		rightPanel.setBackground(Color.WHITE);
		rightPanel.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));
		rightPanel.setPreferredSize(new Dimension(320, getHeight()));

		// Panel chứa tiêu đề
		JPanel titlePanel = new JPanel(new BorderLayout());
		titlePanel.setBackground(Color.WHITE);
		titlePanel.setBorder(new EmptyBorder(15, 20, 15, 20));
		JLabel titleLabel = new JLabel("Danh sách sản phẩm");
		titleLabel.setFont(TITLE_FONT);
		titlePanel.add(titleLabel, BorderLayout.WEST);

		// Panel chứa danh sách sản phẩm
		productsPanel = new JPanel();
		productsPanel.setBackground(Color.WHITE);
		productsPanel.setLayout(new BoxLayout(productsPanel, BoxLayout.Y_AXIS));
		productsPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

		JScrollPane scrollPane = new JScrollPane(productsPanel);
		scrollPane.setBorder(null);
		scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.getVerticalScrollBar().setUI(new CustomScrollBarUI());

		rightPanel.add(titlePanel, BorderLayout.NORTH);
		rightPanel.add(scrollPane, BorderLayout.CENTER);

		add(mainPanel, BorderLayout.CENTER);
		add(rightPanel, BorderLayout.EAST);
	}

	private JPanel createProductCard(String name, int quantity, String imagePath) {
		JPanel card = new JPanel(new BorderLayout(10, 10));
		card.setBackground(Color.WHITE);
		card.setBorder(BorderFactory.createCompoundBorder(new LineBorder(new Color(245, 245, 245), 1, true),
				new EmptyBorder(10, 10, 10, 10)));
		card.setMaximumSize(new Dimension(260, 100));
		card.setPreferredSize(new Dimension(260, 100));

		// Image panel
		ImagePanel imagePanel = new ImagePanel(imagePath, 80, 80);
		imagePanel.setBackground(Color.WHITE);
		JPanel imageContainer = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));
		imageContainer.setBackground(Color.WHITE);
		imageContainer.add(imagePanel);

		// Info panel
		JPanel infoPanel = new JPanel();
		infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
		infoPanel.setBackground(Color.WHITE);

		JLabel nameLabel = new JLabel(name);
		nameLabel.setFont(new Font(FlatRobotoFont.FAMILY, Font.BOLD, 13));
		nameLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

		JLabel quantityLabel = new JLabel("Số lượng: " + quantity);
		quantityLabel.setFont(CONTENT_FONT);
		quantityLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

		infoPanel.setBorder(new EmptyBorder(5, 10, 5, 5));
		infoPanel.add(nameLabel);
		infoPanel.add(Box.createRigidArea(new Dimension(0, 5)));
		infoPanel.add(quantityLabel);

		card.add(imageContainer, BorderLayout.WEST);
		card.add(infoPanel, BorderLayout.CENTER);

		// Hover effect
		MouseAdapter hoverAdapter = new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				card.setBackground(HOVER_COLOR);
				imageContainer.setBackground(HOVER_COLOR);
				infoPanel.setBackground(HOVER_COLOR);
			}

			@Override
			public void mouseExited(MouseEvent e) {
				card.setBackground(Color.WHITE);
				imageContainer.setBackground(Color.WHITE);
				infoPanel.setBackground(Color.WHITE);
			}
		};

		card.addMouseListener(hoverAdapter);
		imageContainer.addMouseListener(hoverAdapter);
		infoPanel.addMouseListener(hoverAdapter);

		// Wrapper panel
		JPanel wrapperPanel = new JPanel();
		wrapperPanel.setLayout(new BoxLayout(wrapperPanel, BoxLayout.Y_AXIS));
		wrapperPanel.setBackground(Color.WHITE);
		wrapperPanel.add(card);
		wrapperPanel.add(Box.createRigidArea(new Dimension(0, 10)));

		return wrapperPanel;
	}

	private JPanel createTopPanel() {
		JPanel topPanel = new JPanel(new BorderLayout(20, 0));
		topPanel.setBackground(Color.WHITE);

		// Get current user for permission checking
		String currentUserId = UserSession.getInstance().getCurrentUser().getUserID();

		// Search panel
		JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
		searchPanel.setBackground(Color.WHITE);

		searchField = new JTextField();
		searchField.setPreferredSize(new Dimension(200, 35));
		searchField.setFont(CONTENT_FONT);

		JButton searchButton = createRoundedButton("", "/icon/search.png", false);
		configureButtonWithPermission(searchButton, currentUserId, PermissionChecker.PERM_PRODUCT_MANAGEMENT, () -> {
			String keyword = searchField.getText().trim();
			if (keyword.isEmpty()) {
				JOptionPane.showMessageDialog(this, "Vui lòng nhập từ khóa tìm kiếm!", "Thông báo",
						JOptionPane.WARNING_MESSAGE);
				return;
			}
			performSearch(keyword);
		});

		searchPanel.add(searchField);
		searchPanel.add(searchButton);

		// Actions panel
		JPanel actionsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
		actionsPanel.setBackground(Color.WHITE);

		// Add Category Button
		JButton addButton = createRoundedButton("Thêm danh mục", "/icon/circle-plus.png", true);
		addButton.setBackground(PRIMARY_COLOR);
		addButton.setForeground(Color.WHITE);
		addButton.setPreferredSize(new Dimension(160, 38));
		configureButtonWithPermission(addButton, currentUserId, PermissionChecker.PERM_PRODUCT_MANAGEMENT, () -> {
			showAddCategoryDialog();
		});

		// Edit Button
		JButton editButton = createRoundedButton("Edit", "/icon/pencil.png", true);
		configureButtonWithPermission(editButton, currentUserId, PermissionChecker.PERM_PRODUCT_MANAGEMENT, () -> {
			if (selectedRow == -1) {
				JOptionPane.showMessageDialog(this, "Vui lòng chọn một danh mục để chỉnh sửa.", "Thông báo",
						JOptionPane.WARNING_MESSAGE);
				return;
			}
			showEditCategoryDialog();
		});

		// Delete Button
		JButton deleteButton = createRoundedButton("Xóa", "/icon/trash.png", true);
		configureButtonWithPermission(deleteButton, currentUserId, PermissionChecker.PERM_PRODUCT_MANAGEMENT, () -> {
			if (selectedRow == -1) {
				JOptionPane.showMessageDialog(this, "Vui lòng chọn một danh mục để xóa.", "Thông báo",
						JOptionPane.WARNING_MESSAGE);
				return;
			}
			showDeleteConfirmDialog();
		});

		actionsPanel.add(addButton);
		actionsPanel.add(editButton);
		actionsPanel.add(deleteButton);

		topPanel.add(searchPanel, BorderLayout.WEST);
		topPanel.add(actionsPanel, BorderLayout.EAST);

		return topPanel;
	}

	// Thêm phương thức configureButtonWithPermission
	private void configureButtonWithPermission(JButton button, String userId, String permission, Runnable action) {
		// Check if user has the required permission
		if (PermissionChecker.hasPermission(userId, permission)) {
			button.setEnabled(true);
			button.addActionListener(e -> {
				if (button.isEnabled()) {
					action.run();
				}
			});
		} else {
			button.setEnabled(false);
			String permissionDesc = PermissionChecker.getPermissionDescription(permission);
			button.setToolTipText("Bạn không có quyền " + permissionDesc);
		}
	}

	// Tách các dialog thành các phương thức riêng
	private void showAddCategoryDialog() {
		JPanel panel = new JPanel(new GridLayout(2, 2, 5, 5));
		panel.add(new JLabel("Tên danh mục:"));
		JTextField nameField = new JTextField();
		panel.add(nameField);
		panel.add(new JLabel("Ghi chú:"));
		JTextField noteField = new JTextField();
		panel.add(noteField);

		int result = JOptionPane.showConfirmDialog(this, panel, "Thêm danh mục", JOptionPane.OK_CANCEL_OPTION,
				JOptionPane.PLAIN_MESSAGE);

		if (result == JOptionPane.OK_OPTION) {
			handleAddCategory(nameField.getText(), noteField.getText());
		}
	}

	private void showEditCategoryDialog() {
		String currentName = (String) tableModel.getValueAt(selectedRow, 1);
		String currentNote = (String) tableModel.getValueAt(selectedRow, 2);

		JPanel panel = new JPanel(new GridLayout(2, 2, 5, 5));
		panel.add(new JLabel("Chỉnh sửa tên danh mục:"));
		JTextField nameField = new JTextField(currentName);
		panel.add(nameField);
		panel.add(new JLabel("Chỉnh sửa ghi chú:"));
		JTextField noteField = new JTextField(currentNote);
		panel.add(noteField);

		int result = JOptionPane.showConfirmDialog(this, panel, "Chỉnh sửa danh mục", JOptionPane.OK_CANCEL_OPTION,
				JOptionPane.PLAIN_MESSAGE);

		if (result == JOptionPane.OK_OPTION) {
			handleEditCategory(nameField.getText(), noteField.getText());
		}
	}

	private void handleEditCategory(String newName, String newNote) {
		try {
			if (newName == null || newName.trim().isEmpty()) {
				JOptionPane.showMessageDialog(this, "Tên danh mục không được để trống.", "Lỗi",
						JOptionPane.ERROR_MESSAGE);
				return;
			}

			// Cập nhật dữ liệu trong bảng
			tableModel.setValueAt(newName, selectedRow, 1);
			tableModel.setValueAt(newNote, selectedRow, 2);

			// Log và thông báo
			LOGGER.info("Đã cập nhật danh mục: " + tableModel.getValueAt(selectedRow, 0));
			JOptionPane.showMessageDialog(this, "Cập nhật danh mục thành công!");

		} catch (Exception e) {
			LOGGER.severe("Lỗi cập nhật danh mục: " + e.getMessage());
			JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật danh mục: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private void handleDeleteCategory(String maDM) {
		try {
			// Xóa dòng khỏi bảng
			tableModel.removeRow(selectedRow);

			// Log và thông báo
			LOGGER.info("Đã xóa danh mục: " + maDM);
			JOptionPane.showMessageDialog(this, "Xóa danh mục thành công!", "Thông báo",
					JOptionPane.INFORMATION_MESSAGE);

			// Reset selection
			selectedRow = -1;

		} catch (Exception e) {
			LOGGER.severe("Lỗi xóa danh mục: " + e.getMessage());
			JOptionPane.showMessageDialog(this, "Lỗi khi xóa danh mục: " + e.getMessage(), "Lỗi",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private void showDeleteConfirmDialog() {
		String maDM = (String) tableModel.getValueAt(selectedRow, 0);
		int confirm = JOptionPane.showConfirmDialog(this,
				"Bạn có chắc muốn xóa danh mục này?\nHành động này không thể hoàn tác!", "Xác nhận xóa",
				JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

		if (confirm == JOptionPane.YES_OPTION) {
			handleDeleteCategory(maDM);
		}
	}

	// Trong các phương thức xử lý
	private void handleAddCategory(String name, String note) {
		try {
			if (name == null || name.trim().isEmpty()) {
				JOptionPane.showMessageDialog(this, "Tên danh mục không được để trống.");
				return;
			}
			String maDM = "CAT" + String.format("%03d", tableModel.getRowCount() + 1);

			// Thêm logging
			LOGGER.info("Adding new category: " + maDM + " - " + name);

			Object[] rowData = { maDM, name, note };
			tableModel.addRow(rowData);
			JOptionPane.showMessageDialog(this, "Thêm Danh Mục thành công");
		} catch (Exception e) {
			LOGGER.severe("Error adding category: " + e.getMessage());
			JOptionPane.showMessageDialog(this, "Lỗi khi thêm danh mục: " + e.getMessage());
		}
	}

	private JPanel createTablePanel() {
		JPanel tablePanel = new JPanel(new BorderLayout(0, 15));
		tablePanel.setBackground(Color.WHITE);

		String[] columns = { "Mã DM", "Tên danh mục", "Ghi chú" };
		tableModel = new DefaultTableModel(columns, 0) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return column == 2;
			}
		};

		table = new JTable(tableModel);
		table.setFont(CONTENT_FONT);
		table.setRowHeight(32);
		table.setGridColor(new Color(245, 245, 245));
		table.setSelectionBackground(HOVER_COLOR);
		table.setSelectionForeground(Color.BLACK);
		table.setShowVerticalLines(true);
		table.setShowHorizontalLines(true);

		// Căn giữa nội dung và điều chỉnh độ rộng cột
		DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
		centerRenderer.setHorizontalAlignment(JLabel.CENTER);

		for (int i = 0; i < table.getColumnCount(); i++) {
			TableColumn column = table.getColumnModel().getColumn(i);
			column.setCellRenderer(centerRenderer);

			switch (i) {
			case 0: // Mã DM
				column.setPreferredWidth(80);
				column.setMaxWidth(80);
				column.setMinWidth(80);
				break;
			case 1: // Tên danh mục
				column.setPreferredWidth(150);
				break;
			case 2: // Ghi chú
				column.setPreferredWidth(200);
				break;
			}
		}

		// Thêm sự kiện click để hiển thị sản phẩm
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				selectedRow = table.getSelectedRow();
				if (selectedRow != -1) {
					String category = (String) table.getValueAt(selectedRow, 0);
					searchField.setText((String) tableModel.getValueAt(selectedRow, 1));

				}
			}
		});

		// Header styling
		JTableHeader header = table.getTableHeader();
		header.setFont(HEADER_FONT);
		header.setBackground(Color.WHITE);
		header.setForeground(Color.BLACK);
		header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
		((DefaultTableCellRenderer) header.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

		// Scroll pane
		JScrollPane scrollPane = new JScrollPane(table);
		scrollPane.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));
		scrollPane.getVerticalScrollBar().setUI(new CustomScrollBarUI());

		tablePanel.add(scrollPane, BorderLayout.CENTER);

		return tablePanel;
	}

	private JButton createRoundedButton(String text, String iconPath, boolean isRounded) {
		JButton button = new JButton(text);
		button.setFont(CONTENT_FONT);
		if (iconPath != null && !iconPath.isEmpty()) {
			button.setIcon(new ImageIcon(getClass().getResource(iconPath)));
		}

		if (isRounded) {
			button.setBorder(new LineBorder(new Color(230, 230, 230), 1, true));
		} else {
			button.setBorder(BorderFactory.createEmptyBorder());
		}

		button.setFocusPainted(false);
		button.setContentAreaFilled(true);
		button.setBackground(Color.WHITE);
		button.setPreferredSize(new Dimension(text.isEmpty() ? 38 : 130, 38));

		// Add hover effect
		button.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				if (!button.getForeground().equals(Color.WHITE)) {
					button.setBackground(HOVER_COLOR);
				}
			}

			@Override
			public void mouseExited(MouseEvent e) {
				if (button.getForeground().equals(Color.WHITE)) {
					button.setBackground(PRIMARY_COLOR);
				} else {
					button.setBackground(Color.WHITE);
				}
			}
		});

		return button;
	}

	private class CustomScrollBarUI extends BasicScrollBarUI {
		@Override
		protected void configureScrollBarColors() {
			this.thumbColor = CONTENT_COLOR;
			this.trackColor = Color.WHITE;
		}

		@Override
		protected JButton createDecreaseButton(int orientation) {
			return createZeroButton();
		}

		@Override
		protected JButton createIncreaseButton(int orientation) {
			return createZeroButton();
		}

		@Override
		protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
			Graphics2D g2 = (Graphics2D) g.create();
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g2.setPaint(thumbColor);
			g2.fillRoundRect(thumbBounds.x, thumbBounds.y, thumbBounds.width, thumbBounds.height, 10, 10);
			g2.dispose();
		}

		@Override
		protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
			Graphics2D g2 = (Graphics2D) g.create();
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g2.setPaint(trackColor);
			if (this.scrollbar.getOrientation() == JScrollBar.VERTICAL) {
				g2.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
			} else {
				g2.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
			}
			g2.dispose();
		}

		private JButton createZeroButton() {
			JButton button = new JButton();
			button.setPreferredSize(new Dimension(0, 0));
			button.setMinimumSize(new Dimension(0, 0));
			button.setMaximumSize(new Dimension(0, 0));
			return button;
		}
	}

	private void performSearch(String searchText) {
		TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
		table.setRowSorter(sorter);

		if (searchText.trim().length() == 0) {
			sorter.setRowFilter(null);
		} else {
			sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
		}
	}

	// Các phương thức getter và utility
	public JTable getTable() {
		return table;
	}

	public DefaultTableModel getTableModel() {
		return tableModel;
	}

	public int getSelectedRow() {
		return selectedRow;
	}

	// Phương thức refresh
	public void refreshProductsPanel() {
		if (selectedRow != -1) {
			String category = (String) table.getValueAt(selectedRow, 0);
		}
	}

	public class TimDanhMuc extends JDialog {
		private static final long serialVersionUID = 1L;
		private final JPanel contentPanel = new JPanel();
		private JTable table;
		private DefaultTableModel tableModel;
		private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
		private static final Color CONTENT_COLOR = new Color(255, 192, 203);
		private static final Color HOVER_COLOR = new Color(252, 231, 243);
		private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
		private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
		private static final Font TITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 14);

		/**
		 * Launch the application.
		 */

		/**
		 * Create the dialog.
		 */
		public TimDanhMuc() {
			setTitle("Tìm Danh Mục");
			setBounds(100, 100, 600, 300);
			getContentPane().setLayout(new BorderLayout());

			contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
			getContentPane().add(contentPanel, BorderLayout.CENTER);
			contentPanel.setLayout(new BorderLayout(0, 0));

			contentPanel.add(createTablePanel(), BorderLayout.CENTER);

			// Optional: Add a button panel (for example, a Close button)
			JPanel buttonPanel = new JPanel();
			contentPanel.add(buttonPanel, BorderLayout.SOUTH);

			JButton closeButton = new JButton("Close");
			closeButton.addActionListener(e -> dispose());
			buttonPanel.add(closeButton);
		}

		private JPanel createTablePanel() {
			JPanel tablePanel = new JPanel(new BorderLayout(0, 15));
			tablePanel.setBackground(Color.WHITE);

			String[] columns = { "Mã DM", "Tên danh mục", "Ghi chú" };
			tableModel = new DefaultTableModel(columns, 0) {
				@Override
				public boolean isCellEditable(int row, int column) {
					return column == 2; // Only the "Ghi chú" column is editable
				}
			};

			table = new JTable(tableModel);
			table.setFont(CONTENT_FONT);
			table.setRowHeight(32);
			table.setGridColor(new Color(245, 245, 245));
			table.setSelectionBackground(HOVER_COLOR);
			table.setSelectionForeground(Color.BLACK);
			table.setShowVerticalLines(true);
			table.setShowHorizontalLines(true);

			// Center-align content and adjust column width
			DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
			centerRenderer.setHorizontalAlignment(JLabel.CENTER);

			for (int i = 0; i < table.getColumnCount(); i++) {
				TableColumn column = table.getColumnModel().getColumn(i);
				column.setCellRenderer(centerRenderer);

				switch (i) {
				case 0: // Mã DM
					column.setPreferredWidth(80);
					column.setMaxWidth(80);
					column.setMinWidth(80);
					break;
				case 1: // Tên danh mục
					column.setPreferredWidth(150);
					break;
				case 2: // Ghi chú
					column.setPreferredWidth(200);
					break;
				}
			}

			// Header styling
			JTableHeader header = table.getTableHeader();
			header.setFont(HEADER_FONT);
			header.setBackground(Color.WHITE);
			header.setForeground(Color.BLACK);
			header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));
			((DefaultTableCellRenderer) header.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

			// Scroll pane
			JScrollPane scrollPane = new JScrollPane(table);
			scrollPane.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));

			tablePanel.add(scrollPane, BorderLayout.CENTER);

			return tablePanel;
		}

		public void hienThiKetQuaTimkiem(ArrayList<DanhMuc> danhSach) {
			// Xóa dữ liệu cũ trong bảng
			tableModel.setRowCount(0);
			// Thêm dữ liệu mới vào bảng
			for (DanhMuc s : danhSach) {
				String[] row = { s.getMaDM(), s.getTenDM(), s.getGhiChu() };
				tableModel.addRow(row);
			}
		}
	}

}