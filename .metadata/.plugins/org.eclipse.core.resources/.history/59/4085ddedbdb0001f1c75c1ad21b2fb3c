package component;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.UUID;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
public class ImageUploadUtil {
    private static final Logger LOGGER = Logger.getLogger(ImageUploadUtil.class.getName());
    // Define the path to your project's resources/images directory
    private static final String IMAGE_DIRECTORY = "src/main/resources/images/products/";

    public static String uploadProductImage() {
        // Create file chooser for images
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn ảnh sản phẩm");
        fileChooser.setFileFilter(new FileNameExtensionFilter(
            "Image files", "jpg", "jpeg", "png", "gif"
        ));

        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                
                // Generate unique filename to prevent conflicts
                String originalFileName = selectedFile.getName();
                String extension = originalFileName.substring(originalFileName.lastIndexOf('.'));
                String newFileName = UUID.randomUUID().toString() + extension;
                
                // Ensure directory exists
                File directory = new File(IMAGE_DIRECTORY);
                if (!directory.exists()) {
                    directory.mkdirs();
                }

                // Create destination path
                Path destinationPath = Path.of(IMAGE_DIRECTORY + newFileName);
                
                // Copy file to resources directory
                Files.copy(selectedFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);
                
                // Return relative path to be stored in database
                return "products/" + newFileName;
                
            } catch (IOException e) {
                LOGGER.severe("Error uploading image: " + e.getMessage());
                return null;
            }
        }
        return null;
    }

    public static ImageIcon loadProductImage(String imagePath) {
        try {
            if (imagePath == null || imagePath.trim().isEmpty()) {
                return loadDefaultImage();
            }
            
            File imageFile = new File(IMAGE_DIRECTORY + imagePath);
            if (!imageFile.exists()) {
                return loadDefaultImage();
            }
            
            BufferedImage img = ImageIO.read(imageFile);
            return new ImageIcon(img);
            
        } catch (IOException e) {
            LOGGER.severe("Error loading image: " + e.getMessage());
            return loadDefaultImage();
        }
    }

    private static ImageIcon loadDefaultImage() {
        try {
            File defaultImage = new File(IMAGE_DIRECTORY + "default-product.png");
            if (defaultImage.exists()) {
                return new ImageIcon(ImageIO.read(defaultImage));
            }
        } catch (IOException e) {
            LOGGER.severe("Error loading default image: " + e.getMessage());
        }
        return null;
    }
}

