package bus;

import dao.UserDAO;
import dao.UserRoleDAO;
import entity.User;
import entity.UserRole;

import java.util.List;
import java.util.UUID;
import java.util.regex.Pattern;

public class UserBUS {
    private UserDAO userDAO;
    private static final String EMAIL_REGEX = "^[A-Za-z0-9+_.-]+@(.+)$";
    private static final String PHONE_REGEX = "^[0-9]{10}$";
    private UserRoleDAO userPermissionDAO;

    public UserBUS() {
        userDAO = new UserDAO();
   
        userPermissionDAO = new UserRoleDAO();
    }

    public List<User> getAllUsers() {
        return userDAO.getAllUsers();
    }
    
    public User getUserById(String userID) throws Exception {  
        if (userID == null || userID.trim().isEmpty()) {  
            throw new Exception("User ID không được để trống");  
        }  
        return userDAO.getUserById(userID);  
    }  
    
    public List<User> searchUsers(String keyword) {  
        return userDAO.searchUsers(keyword);  
    }  

    public boolean addUser(User user) throws Exception {  
        validateUserData(user, true);  
        
        // Generate new userID if not provided  
        if (user.getUserID() == null || user.getUserID().trim().isEmpty()) {  
            user.setUserID(generateNewUserID()); // Use the new method to generate the ID  
        }  

        // Set default status if not provided  
        if (user.getStatus() == null || user.getStatus().trim().isEmpty()) {  
            user.setStatus("Đang hoạt động");  
        }  
        
        // Set default role if not provided  
        if (user.getRole() == null || user.getRole().trim().isEmpty()) {  
            user.setRole("User");  
        }  

        return userDAO.addUser(user);  
    }  

    public boolean updateUser(User user) throws Exception {  
        validateUserData(user, false);  
        return userDAO.updateUser(user);  
    }  

    public boolean deleteUser(String userID) throws Exception {  
        if (userID == null || userID.trim().isEmpty()) {  
            throw new Exception("User ID không được để trống");  
        }  
        
        // Check if user exists  
        User existingUser = userDAO.getUserById(userID);  
        if (existingUser == null) {  
            throw new Exception("Không tìm thấy người dùng");  
        }  
        
        // Prevent deleting the last active admin  
        if ("Admin".equals(existingUser.getRole())) {  
            List<User> admins = userDAO.getUsersByRole("Admin");  
            if (admins.size() <= 1) {  
                throw new Exception("Không thể xóa admin cuối cùng trong hệ thống");  
            }  
        }  

        return userDAO.updateUserStatus(userID, "Ngừng hoạt động");  
    }  
    
    public boolean resetPassword(String userID, String newPassword) throws Exception {  
        if (userID == null || userID.trim().isEmpty()) {  
            throw new Exception("User ID không được để trống");  
        }  
        if (newPassword == null || newPassword.trim().isEmpty()) {  
            throw new Exception("Mật khẩu mới không được để trống");  
        }  
        if (newPassword.length() < 6) {  
            throw new Exception("Mật khẩu phải có ít nhất 6 ký tự");  
        }  
        
        return userDAO.updatePassword(userID, newPassword);  
    }  
    
    public boolean updateUserStatus(String userID, String status) throws Exception {  
        if (userID == null || userID.trim().isEmpty()) {  
            throw new Exception("User ID không được để trống");  
        }  
        if (status == null || status.trim().isEmpty()) {  
            throw new Exception("Trạng thái không được để trống");  
        }  
        if (!status.equals("Đang hoạt động") && !status.equals("Ngừng hoạt động")) {  
            throw new Exception("Trạng thái không hợp lệ");  
        }  
        
        return userDAO.updateUserStatus(userID, status);  
    }  

    
    public boolean hasPermission(String userID, String permissionID) {
        try {
            return userPermissionDAO.checkPermission(userID, permissionID);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean assignPermission(String userID, String permissionID) throws Exception {
        if (userID == null || userID.trim().isEmpty()) {
            throw new Exception("User ID không được để trống");
        }
        if (permissionID == null || permissionID.trim().isEmpty()) {
            throw new Exception("Permission ID không được để trống");
        }
        
        // Kiểm tra user tồn tại
        if (getUserById(userID) == null) {
            throw new Exception("Không tìm thấy người dùng");
        }
        
        return userPermissionDAO.assignPermission(userID, permissionID);
    }

    public boolean removePermission(String userID, String permissionID) throws Exception {
        if (userID == null || userID.trim().isEmpty()) {
            throw new Exception("User ID không được để trống");
        }
        if (permissionID == null || permissionID.trim().isEmpty()) {
            throw new Exception("Permission ID không được để trống");
        }
        
        return userPermissionDAO.removePermission(userID, permissionID);
    }

    public List<String> getUserPermissions(String userID) throws Exception {
        if (userID == null || userID.trim().isEmpty()) {
            throw new Exception("User ID không được để trống");
        }
        
        return userPermissionDAO.getPermissionsByUser(userID);
    }

}