package dialog;

import com.toedter.calendar.JDateChooser;

import bus.UserBUS;
import bus.UserRoleBUS;

import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.util.Date;
import entity.User;
import entity.UserRole;

public class EmployeeDialog extends JDialog {
	private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
	private final User user;
	private boolean confirmed = false;
	private boolean isNewUser;
	private final UserRoleBUS userRoleBUS;

	private JTextField txtFullName, txtPhone, txtEmail, txtUsername, txtPassword;
	private JComboBox<String> cboGender;
	private JComboBox<ComboItem> cboRole;
	private JDateChooser dateChooser;

	public EmployeeDialog(Frame owner, String title, User user, boolean isNew) {
		super(owner, title, true);
		this.user = user;
		this.isNewUser = isNew;
		this.userRoleBUS = new UserRoleBUS();
		initComponents();
		loadUserData();
		setSize(450, 550);
		setLocationRelativeTo(owner);
	}

	private void initComponents() {
		setLayout(new BorderLayout());
		JPanel mainPanel = new JPanel(new GridBagLayout());
		mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
		GridBagConstraints gbc = createGBC();

		// Initialize components
		txtFullName = createStyledTextField();
		txtUsername = createStyledTextField();
		txtPassword = createStyledTextField();
		txtPassword.setEnabled(isNewUser); // Only enable for new users
		cboGender = new JComboBox<>(new String[] { "Nam", "Nữ" });
		dateChooser = new JDateChooser();
		dateChooser.setPreferredSize(new Dimension(200, 30));
		txtPhone = createStyledTextField();
		txtEmail = createStyledTextField();
		cboRole = new JComboBox<>();
		loadRoles();

		// Add components
		addFormField(mainPanel, gbc, "Họ tên:", txtFullName, 0);
		addFormField(mainPanel, gbc, "Tên đăng nhập:", txtUsername, 1);
		if (isNewUser) {
			addFormField(mainPanel, gbc, "Mật khẩu:", txtPassword, 2);
		}
		addFormField(mainPanel, gbc, "Giới tính:", cboGender, isNewUser ? 3 : 2);
		addFormField(mainPanel, gbc, "Ngày sinh:", dateChooser, isNewUser ? 4 : 3);
		addFormField(mainPanel, gbc, "SDT:", txtPhone, isNewUser ? 5 : 4);
		addFormField(mainPanel, gbc, "Email:", txtEmail, isNewUser ? 6 : 5);
		addFormField(mainPanel, gbc, "Vai trò:", cboRole, isNewUser ? 7 : 6);

		// Buttons
		JPanel buttonPanel = createButtonPanel();

		add(mainPanel, BorderLayout.CENTER);
		add(buttonPanel, BorderLayout.SOUTH);
	}

	private void loadRoles() {
		try {
			java.util.List<UserRole> roles = userRoleBUS.getAllRoles();
			cboRole.removeAllItems();
			for (UserRole role : roles) {
				cboRole.addItem(new ComboItem(role.getRoleID(), role.getRoleName()));
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách vai trò: " + e.getMessage());
		}
	}

	private void loadUserData() {
		if (user != null) {
			txtFullName.setText(user.getFullName());
			txtUsername.setText(user.getUsername());
			cboGender.setSelectedItem(user.getGender());
			dateChooser.setDate(user.getBirthDate());
			txtPhone.setText(user.getPhone());
			txtEmail.setText(user.getEmail());

			// Set selected role
			for (int i = 0; i < cboRole.getItemCount(); i++) {
				ComboItem item = cboRole.getItemAt(i);
				if (item.getValue().equals(user.getRole())) {
					cboRole.setSelectedItem(item);
					break;
				}
			}
		}
	}

	private void save() {
		try {
			validateInput();

			user.setFullName(txtFullName.getText().trim());
			user.setUsername(txtUsername.getText().trim());
			if (isNewUser) {
				user.setPassword(txtPassword.getText().trim());
			}
			user.setGender(cboGender.getSelectedItem().toString());
			user.setBirthDate(dateChooser.getDate());
			user.setPhone(txtPhone.getText().trim());
			user.setEmail(txtEmail.getText().trim());

			ComboItem selectedRole = (ComboItem) cboRole.getSelectedItem();
			user.setRole(selectedRole.getValue());

			UserBUS bus = new UserBUS();
			boolean success;
			if (isNewUser) {
				success = bus.addUser(user);
			} else {
				success = bus.updateUser(user);
			}

			if (success) {
				confirmed = true;
				dispose();
			} else {
				throw new Exception("Không thể " + (isNewUser ? "thêm" : "cập nhật") + " nhân viên");
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
		}
	}

	private void validateInput() throws Exception {
		if (txtFullName.getText().trim().isEmpty()) {
			throw new Exception("Họ tên không được để trống");
		}
		if (dateChooser.getDate() == null) {
			throw new Exception("Vui lòng chọn ngày sinh");
		}
		// Add more validations as needed
	}

	private JTextField createStyledTextField() {
		JTextField field = new JTextField();
		field.setPreferredSize(new Dimension(200, 30));
		field.setFont(new Font("Roboto", Font.PLAIN, 14));
		return field;
	}

	private GridBagConstraints createGBC() {
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(5, 5, 5, 5);
		return gbc;
	}

	private void addFormField(JPanel panel, GridBagConstraints gbc, String labelText, JComponent field, int row) {
		gbc.gridy = row;

		gbc.gridx = 0;
		gbc.weightx = 0.3;
		JLabel label = new JLabel(labelText);
		label.setFont(new Font("Roboto", Font.BOLD, 14));
		panel.add(label, gbc);

		gbc.gridx = 1;
		gbc.weightx = 0.7;
		panel.add(field, gbc);
	}

	public boolean isConfirmed() {
		return confirmed;
	}
}