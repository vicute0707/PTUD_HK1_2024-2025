package gui;

import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;

import bus.ImportBUS;
import bus.SanPhamBUS;

import org.jfree.chart.*;
import org.jfree.chart.axis.*;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.*;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.awt.*;
import java.io.*;
import java.math.BigDecimal;
import java.text.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

public class Form_ThongKe extends JPanel {
    // Constants for styling
    private static final Color PRIMARY_COLOR = new Color(63, 81, 181);
    private static final Color ACCENT_COLOR = new Color(92, 107, 192);
    private static final Color BACKGROUND_COLOR = new Color(250, 250, 250);
    private static final Color CARD_COLOR = Color.WHITE;
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 14);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13);
    
    // Component fields
    private JTable importTable;
    private JTable productTable;
    private DefaultTableModel importTableModel;
    private DefaultTableModel productTableModel;
    private JDateChooser startDateChooser;
    private JDateChooser endDateChooser;
    private JPanel importChartPanel;
    private JPanel productChartPanel;
    private JPanel stockValuePanel;
    private JPanel categoryPanel;
    private JPanel summaryPanel;
    private CardLayout cardLayout;
    private JPanel mainCardPanel;
    
    // Business logic objects
    private final ImportBUS importBUS;
    private final SanPhamBUS sanPhamBUS;

    public Form_ThongKe() {
        // Initialize business logic
        importBUS = new ImportBUS();
        sanPhamBUS = new SanPhamBUS();
        
        // Set up the UI
        initializeUI();
        loadInitialData();
    }

    private void initializeUI() {
        // Set up main panel
        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(20, 20, 20, 20));
        setBackground(BACKGROUND_COLOR);

        // Create main components
        createNavigationPanel();
        createMainContentPanel();
        createSummaryPanel();

        // Initial load
        cardLayout.show(mainCardPanel, "IMPORT");
    }

    private void createNavigationPanel() {
        JPanel navPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 10));
        navPanel.setBackground(CARD_COLOR);
        navPanel.setBorder(BorderFactory.createCompoundBorder(
            new MatteBorder(0, 0, 1, 0, new Color(224, 224, 224)),
            new EmptyBorder(10, 15, 10, 15)
        ));

        // Create navigation buttons with modern styling
        JButton importButton = createNavButton("Thống kê nhập hàng", "IMPORT");
        JButton productButton = createNavButton("Thống kê sản phẩm", "PRODUCT");

        navPanel.add(importButton);
        navPanel.add(new JSeparator(JSeparator.VERTICAL));
        navPanel.add(productButton);

        add(navPanel, BorderLayout.NORTH);
    }

    private JButton createNavButton(String text, String cardName) {
        JButton button = new JButton(text);
        button.setFont(HEADER_FONT);
        button.setForeground(PRIMARY_COLOR);
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));

        button.addActionListener(e -> {
            cardLayout.show(mainCardPanel, cardName);
            updateCurrentView(cardName);
        });

        return button;
    }

    private void createMainContentPanel() {
        cardLayout = new CardLayout();
        mainCardPanel = new JPanel(cardLayout);
        mainCardPanel.setBackground(BACKGROUND_COLOR);

        // Create panels for different views
        JPanel importPanel = createImportPanel();
        JPanel productPanel = createProductPanel();

        mainCardPanel.add(importPanel, "IMPORT");
        mainCardPanel.add(productPanel, "PRODUCT");

        add(mainCardPanel, BorderLayout.CENTER);
    }

    private JPanel createImportPanel() {
        JPanel panel = new JPanel(new BorderLayout(15, 15));
        panel.setBackground(BACKGROUND_COLOR);
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));

        // Create filter panel
        JPanel filterPanel = createFilterPanel();
        panel.add(filterPanel, BorderLayout.NORTH);

        // Create charts panel
        JPanel chartsPanel = new JPanel(new GridLayout(1, 2, 15, 0));
        chartsPanel.setBackground(BACKGROUND_COLOR);
        
        // Add bar chart and pie chart
        chartsPanel.add(createImportBarChart());
        chartsPanel.add(createImportPieChart());
        
        panel.add(chartsPanel, BorderLayout.CENTER);

        // Create table panel
        panel.add(createImportTablePanel(), BorderLayout.SOUTH);

        return panel;
    }

    private JPanel createFilterPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 10));
        panel.setBackground(CARD_COLOR);
        panel.setBorder(new EmptyBorder(10, 15, 10, 15));

        // Date range components
        startDateChooser = new JDateChooser();
        endDateChooser = new JDateChooser();
        configureWatermarks();

        // Add components
        panel.add(new JLabel("Từ:"));
        panel.add(startDateChooser);
        panel.add(new JLabel("Đến:"));
        panel.add(endDateChooser);
        panel.add(createActionButton("Thống kê", e -> updateStatistics()));
        panel.add(createActionButton("Xuất báo cáo", e -> exportReport()));

        return panel;
    }

    private JPanel createImportBarChart() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(CARD_COLOR);
        panel.setBorder(createCardBorder("Biểu đồ giá trị nhập hàng theo thời gian"));

        // Create chart
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        JFreeChart chart = createCustomBarChart(dataset);
        ChartPanel chartPanel = new ChartPanel(chart);
        
        panel.add(chartPanel, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createImportPieChart() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(CARD_COLOR);
        panel.setBorder(createCardBorder("Phân bố nhập hàng theo nhà cung cấp"));

        // Create chart
        DefaultPieDataset dataset = new DefaultPieDataset();
        JFreeChart chart = createCustomPieChart(dataset);
        ChartPanel chartPanel = new ChartPanel(chart);
        
        panel.add(chartPanel, BorderLayout.CENTER);
        return panel;
    }

    private JFreeChart createCustomBarChart(DefaultCategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createBarChart(
            null, // Title already in panel border
            "Thời gian",
            "Giá trị (VNĐ)",
            dataset,
            PlotOrientation.VERTICAL,
            true,
            true,
            false
        );

        // Customize chart appearance
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        
        // Modern styling
        renderer.setBarPainter(new StandardBarPainter());
        renderer.setShadowVisible(false);
        renderer.setSeriesPaint(0, PRIMARY_COLOR);
        
        // Customize axes
        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
        
        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setNumberFormatOverride(new DecimalFormat("#,##0 VNĐ"));

        return chart;
    }

    private JFreeChart createCustomPieChart(DefaultPieDataset dataset) {
        JFreeChart chart = ChartFactory.createPieChart(
            null, // Title already in panel border
            dataset,
            true,
            true,
            false
        );

        PiePlot plot = (PiePlot) chart.getPlot();
        plot.setBackgroundPaint(CARD_COLOR);
        plot.setOutlineVisible(false);
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(
            "{0}: {1} ({2})", 
            new DecimalFormat("0"), 
            new DecimalFormat("0.0%")
        ));

        return chart;
    }

    private JButton createActionButton(String text, java.awt.event.ActionListener listener) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);
        button.setBackground(PRIMARY_COLOR);
        button.setForeground(Color.WHITE);
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.addActionListener(listener);
        
        // Add hover effect
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(ACCENT_COLOR);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(PRIMARY_COLOR);
            }
        });

        return button;
    }

    private Border createCardBorder(String title) {
        return BorderFactory.createCompoundBorder(
            new EmptyBorder(10, 10, 10, 10),
            BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(224, 224, 224)),
                title,
                TitledBorder.LEFT,
                TitledBorder.TOP,
                HEADER_FONT,
                PRIMARY_COLOR
            )
        );
    }
    

    private void updateStatistics() {
        if (!validateDateRange()) {
            showErrorMessage("Vui lòng chọn khoảng thời gian hợp lệ");
            return;
        }

        try {
            LocalDate startDate = getLocalDateFromChooser(startDateChooser);
            LocalDate endDate = getLocalDateFromChooser(endDateChooser);
            
            // Update visualizations
            updateImportChart(startDate, endDate);
            updateImportTable(startDate, endDate);
            updateSummaryPanel(startDate, endDate);
            
        } catch (Exception e) {
            showErrorMessage("Lỗi khi cập nhật thống kê: " + e.getMessage());
        }
    }

    private void exportReport() {
        if (!validateDateRange()) {
            showErrorMessage("Vui lòng chọn khoảng thời gian trước khi xuất báo cáo");
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn vị trí lưu báo cáo");
        
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                if (!filePath.endsWith(".pdf")) {
                    filePath += ".pdf";
                }
                
                exportToPDF(filePath);
                showSuccessMessage("Xuất báo cáo thành công!");
                
            } catch (Exception e) {
                showErrorMessage("Lỗi khi xuất báo cáo: " + e.getMessage());
            }
        }
    }

    // Utility methods
    private void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(
            this,
            message,
            "Lỗi",
            JOptionPane.ERROR_MESSAGE
        );
    }

    private void showSuccessMessage(String message) {
        JOptionPane.showMessageDialog(
            this,
            message,
            "Thành công",
            JOptionPane.INFORMATION_MESSAGE
        );
    }

    private boolean validateDateRange() {
        return startDateChooser.getDate() != null && 
               endDateChooser.getDate() != null && 
               !startDateChooser.getDate().after(endDateChooser.getDate());
    }

    private LocalDate getLocalDateFromChooser(JDateChooser chooser) {
        return chooser.getDate().toInstant()
                     .atZone(ZoneId.systemDefault())
                     .toLocalDate();
    }
}
