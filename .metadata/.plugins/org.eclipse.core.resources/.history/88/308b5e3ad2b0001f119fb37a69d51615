package component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.logging.Logger;

public class ImageUploadUtil {
    private static final Logger LOGGER = Logger.getLogger(ImageUploadUtil.class.getName());
    
    // Simplified path - just store in src/img_product
    private static final String IMAGE_DIRECTORY = "src/img_product";
    private static final long MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
    private static final String[] ALLOWED_EXTENSIONS = {".jpg", ".jpeg", ".png"};

    /**
     * Uploads a product image and returns just the filename for database storage.
     * The file will be saved with the product ID as its name.
     */
    public static String uploadProductImage(File sourceFile, String productId) throws IOException {
        // Validate the input file
        validateImageFile(sourceFile);

        // Get file extension from original file
        String extension = getFileExtension(sourceFile.getName());
        
        // Create the image directory if it doesn't exist
        Files.createDirectories(Paths.get(IMAGE_DIRECTORY));

        // Create filename using product ID (e.g., "SP001.jpg")
        String fileName = productId + extension;
        
        // Copy file to destination
        Path targetPath = Paths.get(IMAGE_DIRECTORY, fileName);
        Files.copy(sourceFile.toPath(), targetPath, StandardCopyOption.REPLACE_EXISTING);

        // Return just the filename for database storage
        return fileName;
    }

    private static void validateImageFile(File file) {
        if (file == null || !file.exists()) {
            throw new IllegalArgumentException("File does not exist");
        }

        if (file.length() > MAX_FILE_SIZE) {
            throw new IllegalArgumentException("File size exceeds 5MB limit");
        }

        String extension = getFileExtension(file.getName()).toLowerCase();
        boolean isValidExtension = false;
        for (String allowedExt : ALLOWED_EXTENSIONS) {
            if (allowedExt.equalsIgnoreCase(extension)) {
                isValidExtension = true;
                break;
            }
        }

        if (!isValidExtension) {
            throw new IllegalArgumentException("Invalid file format. Allowed: JPG, JPEG, PNG");
        }
    }

    private static String getFileExtension(String fileName) {
        int lastDot = fileName.lastIndexOf('.');
        return lastDot > 0 ? fileName.substring(lastDot) : "";
    }

    /**
     * Deletes a product image given its filename
     */
    public static boolean deleteProductImage(String fileName) {
        try {
            if (fileName == null || fileName.trim().isEmpty()) {
                return false;
            }
            
            Path imagePath = Paths.get(IMAGE_DIRECTORY, fileName);
            return Files.deleteIfExists(imagePath);
        } catch (IOException e) {
            LOGGER.warning("Failed to delete image: " + fileName);
            return false;
        }
    }

    /**
     * Updates a product's image by replacing the old one
     */
    public static String updateProductImage(File newImageFile, String productId, String oldFileName) 
            throws IOException {
        // Delete the old image if it exists
        if (oldFileName != null && !oldFileName.trim().isEmpty()) {
            deleteProductImage(oldFileName);
        }

        // Upload and return the new image filename
        return uploadProductImage(newImageFile, productId);
    }
}