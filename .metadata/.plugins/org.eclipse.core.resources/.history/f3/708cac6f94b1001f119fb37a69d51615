package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.io.FileWriter;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.toedter.calendar.JDateChooser;

import bus.ImportBUS;
import bus.SanPhamBUS;
import entity.Import;
import entity.ImportDetail;
import entity.SanPham;
import entity.UserSession;
import service.PermissionChecker;
import style.CreateRoundedButton;
import style.CustomScrollBarUI;

public class Form_ThongKe extends JPanel {
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 12);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);

    private JTable importTable;
    private JTable productTable;
    private DefaultTableModel importTableModel;
    private DefaultTableModel productTableModel;
    private JDateChooser startDateChooser;
    private JDateChooser endDateChooser;
    private JPanel importChartPanel;
    private JPanel productChartPanel;
    private ImportBUS importBUS;
    private SanPhamBUS sanPhamBUS;

    public Form_ThongKe() {
        importBUS = new ImportBUS();
        sanPhamBUS = new SanPhamBUS();
        initComponents();
        loadInitialData();
    }

    private void initComponents() {
        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(20, 20, 20, 20));
        setBackground(Color.WHITE);

        // Create tabbed pane for different statistics
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setFont(HEADER_FONT);
        tabbedPane.setBackground(Color.WHITE);

        // Add tabs for import and product statistics
        tabbedPane.addTab("Thống kê nhập hàng", createImportPanel());
        tabbedPane.addTab("Thống kê sản phẩm", createProductPanel());

        add(tabbedPane, BorderLayout.CENTER);
    }

    private JPanel createImportPanel() {
        JPanel panel = new JPanel(new BorderLayout(0, 20));
        panel.setBackground(Color.WHITE);
        panel.setBorder(new EmptyBorder(10, 10, 10, 10));

        // Control panel at the top
        panel.add(createImportControlPanel(), BorderLayout.NORTH);

        // Split pane for chart and table
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        splitPane.setDividerLocation(300);
        splitPane.setBackground(Color.WHITE);

        // Chart panel
        importChartPanel = new JPanel(new BorderLayout());
        importChartPanel.setBackground(Color.WHITE);
        splitPane.setTopComponent(importChartPanel);

        // Table panel
        JPanel tablePanel = createImportTablePanel();
        splitPane.setBottomComponent(tablePanel);

        panel.add(splitPane, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createImportControlPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
        panel.setBackground(Color.WHITE);

        startDateChooser = new JDateChooser();
        endDateChooser = new JDateChooser();
        startDateChooser.setPreferredSize(new Dimension(150, 30));
        endDateChooser.setPreferredSize(new Dimension(150, 30));

        CreateRoundedButton createRoundedButton = new CreateRoundedButton();
        
        JButton searchButton = createRoundedButton.createRoundedButton("Thống kê", "/icon/search.png", true);
        configureButtonWithPermission(searchButton, UserSession.getInstance().getCurrentUser().getUserID(), 
                                    PermissionChecker.PERM_REPORT, 
                                    () -> updateImportStatistics());

        JButton exportButton = createRoundedButton.createRoundedButton("Xuất báo cáo", "/icon/printer.png", true);
        configureButtonWithPermission(exportButton, UserSession.getInstance().getCurrentUser().getUserID(), 
                                    PermissionChecker.PERM_REPORT, 
                                    () -> exportImportReport());

        panel.add(new JLabel("Từ ngày:"));
        panel.add(startDateChooser);
        panel.add(new JLabel("Đến ngày:"));
        panel.add(endDateChooser);
        panel.add(searchButton);
        panel.add(exportButton);

        return panel;
    }

    private JPanel createImportTablePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);

        // Initialize table model with columns
        String[] columns = {"Mã phiếu nhập", "Ngày nhập", "Nhà cung cấp", "Số lượng SP", "Tổng tiền"};
        importTableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        importTable = new JTable(importTableModel);
        setupTable(importTable);

        JScrollPane scrollPane = new JScrollPane(importTable);
        scrollPane.getViewport().setBackground(Color.WHITE);
        scrollPane.setVerticalScrollBar);

        panel.add(scrollPane, BorderLayout.CENTER);
        return panel;
    }

    private void setupTable(JTable table) {
        table.setFont(CONTENT_FONT);
        table.setRowHeight(30);
        table.setGridColor(new Color(245, 245, 245));
        table.setSelectionBackground(new Color(252, 231, 243));
        table.setSelectionForeground(Color.BLACK);

        JTableHeader header = table.getTableHeader();
        header.setFont(HEADER_FONT);
        header.setBackground(Color.WHITE);
        header.setBorder(BorderFactory.createLineBorder(new Color(245, 245, 245)));

        // Set number format renderer for amount columns
        DefaultTableCellRenderer amountRenderer = new DefaultTableCellRenderer() {
            @Override
            public void setValue(Object value) {
                if (value instanceof Number) {
                    setHorizontalAlignment(JLabel.RIGHT);
                    setText(String.format("%,d VNĐ", ((Number)value).longValue()));
                } else {
                    super.setValue(value);
                }
            }
        };
        table.getColumnModel().getColumn(4).setCellRenderer(amountRenderer);
    }

    private void updateImportStatistics() {
        if (startDateChooser.getDate() == null || endDateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khoảng thời gian", "Thông báo", 
                                        JOptionPane.WARNING_MESSAGE);
            return;
        }

        LocalDate startDate = startDateChooser.getDate().toInstant()
                            .atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate endDate = endDateChooser.getDate().toInstant()
                           .atZone(ZoneId.systemDefault()).toLocalDate();

        // Get import data and update table
        List<Import> imports = importBUS.getAllImports();
        updateImportTable(imports, startDate, endDate);

        // Update chart
        updateImportChart(imports, startDate, endDate);
    }

    private void updateImportTable(List<Import> imports, LocalDate startDate, LocalDate endDate) {
        importTableModel.setRowCount(0);

        imports.stream()
               .filter(imp -> {
                   LocalDate importDate = imp.getImportDate().toInstant()
                                           .atZone(ZoneId.systemDefault()).toLocalDate();
                   return !importDate.isBefore(startDate) && !importDate.isAfter(endDate);
               })
               .forEach(imp -> {
                   try {
                       List<ImportDetail> details = importBUS.getImportDetailsByImportId(imp.getImportID());
                       Object[] row = {
                           imp.getImportID(),
                           imp.getImportDate(),
                           imp.getSupplier(),
                           details.stream().mapToInt(ImportDetail::getQuantity).sum(),
                           imp.getTotalAmount()
                       };
                       importTableModel.addRow(row);
                   } catch (Exception e) {
                       e.printStackTrace();
                   }
               });
    }

    private void updateImportChart(List<Import> imports, LocalDate startDate, LocalDate endDate) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Group imports by date and calculate daily totals
        Map<LocalDate, Double> dailyTotals = imports.stream()
            .filter(imp -> {
                LocalDate importDate = imp.getImportDate().toInstant()
                                       .atZone(ZoneId.systemDefault()).toLocalDate();
                return !importDate.isBefore(startDate) && !importDate.isAfter(endDate);
            })
            .collect(Collectors.groupingBy(
                imp -> imp.getImportDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate(),
                Collectors.summingDouble(Import::getTotalAmount)
            ));

        // Add data to chart dataset
        dailyTotals.forEach((date, total) -> {
            dataset.addValue(total, "Tổng tiền nhập", date.toString());
        });

        // Create chart
        JFreeChart chart = ChartFactory.createBarChart(
            "Biểu đồ nhập hàng",
            "Ngày", 
            "Tổng tiền (VNĐ)",
            dataset,
            PlotOrientation.VERTICAL,
            true,
            true,
            false
        );

        // Update chart panel
        ChartPanel chartPanel = new ChartPanel(chart);
        importChartPanel.removeAll();
        importChartPanel.add(chartPanel);
        importChartPanel.revalidate();
    }

    private void exportImportReport() {
        // Implementation for exporting import statistics report
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn vị trí lưu báo cáo");
        
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();
            if (!filePath.endsWith(".html")) {
                filePath += ".html";
            }
            
            try (FileWriter writer = new FileWriter(filePath)) {
                // Write report content
                writer.write("<html><head><style>");
                writer.write("table { border-collapse: collapse; width: 100%; }");
                writer.write("th, td { border: 1px solid black; padding: 8px; text-align: left; }");
                writer.write("</style></head><body>");
                
                // Add report title and date range
                writer.write("<h2>Báo cáo nhập hàng</h2>");
                writer.write("<p>Từ ngày: " + startDateChooser.getDate() + "</p>");
                writer.write("<p>Đến ngày: " + endDateChooser.getDate() + "</p>");
                
                // Add table data
                writer.write("<table>");
                // Add headers
                writer.write("<tr>");
                for (int i = 0; i < importTable.getColumnCount(); i++) {
                    writer.write("<th>" + importTable.getColumnName(i) + "</th>");
                }
                writer.write("</tr>");
                
                // Add data rows
                for (int i = 0; i < importTable.getRowCount(); i++) {
                    writer.write("<tr>");
                    for (int j = 0; j < importTable.getColumnCount(); j++) {
                        writer.write("<td>" + importTable.getValueAt(i, j) + "</td>");
                    }
                    writer.write("</tr>");
                }
                
                writer.write("</table></body></html>");
                
                JOptionPane.showMessageDialog(this, "Xuất báo cáo thành công!", 
                    "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi xuất báo cáo: " + e.getMessage(),
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Similar methods for product statistics panel...
    // (I'll continue with the product statistics implementation in the next part)

    private void configureButtonWithPermission(JButton button, String userId, 
                                             String permission, Runnable action) {
        if (PermissionChecker.hasPermission(userId, permission)) {
            button.setEnabled(true);
            button.addActionListener(e -> {
                if (button.isEnabled()) {
                    action.run();
                }
            });
        } else {
            button.setEnabled(false);
            String permissionDesc = PermissionChecker.getPermissionDescription(permission);
            button.setToolTipText("Bạn không có quyền " + permissionDesc);
        }
    }
}