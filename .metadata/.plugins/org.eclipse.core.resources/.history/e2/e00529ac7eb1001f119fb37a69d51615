package gui;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

public class Form_ThongKe extends JPanel {
    private JPanel overviewPanel;
    private JPanel chartPanel;
    private JTabbedPane tabsPanel;
    private JTable productTable;
    private JTable supplierTable;

    private static final String DB_URL = "jdbc:mysql://localhost:3306/store_management";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "password";

    public FormThongKe() {
        setLayout(new BorderLayout());
        setBorder(new EmptyBorder(20, 20, 20, 20));

        overviewPanel = createOverviewPanel();
        chartPanel = createChartPanel();
        tabsPanel = createTabsPanel();

        add(overviewPanel, BorderLayout.NORTH);
        add(chartPanel, BorderLayout.CENTER);
        add(tabsPanel, BorderLayout.SOUTH);
    }

    private JPanel createOverviewPanel() {
        JPanel panel = new JPanel(new GridLayout(1, 3, 20, 0));
        panel.setBorder(new EmptyBorder(0, 0, 20, 0));

        JPanel productOverview = createOverviewCard("Tổng Sản Phẩm", getProductCount());
        JPanel orderOverview = createOverviewCard("Tổng Đơn Hàng", getOrderCount());
        JPanel supplierOverview = createOverviewCard("Tổng Nhà Cung Cấp", getSupplierCount());

        panel.add(productOverview);
        panel.add(orderOverview);
        panel.add(supplierOverview);

        return panel;
    }

    private JPanel createOverviewCard(String title, int value) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));

        JLabel titleLabel = new JLabel(title);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16));
        titleLabel.setBorder(new EmptyBorder(10, 10, 10, 10));

        JLabel valueLabel = new JLabel(String.valueOf(value));
        valueLabel.setFont(new Font("Arial", Font.BOLD, 24));
        valueLabel.setBorder(new EmptyBorder(0, 10, 10, 10));

        panel.add(titleLabel, BorderLayout.NORTH);
        panel.add(valueLabel, BorderLayout.CENTER);

        return panel;
    }

    private JPanel createChartPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new EmptyBorder(0, 0, 20, 0));

        JPanel chartArea = new JPanel();
        chartArea.setPreferredSize(new Dimension(0, 400));

        JLabel chartLabel = new JLabel("Biểu Đồ Doanh Thu");
        chartLabel.setFont(new Font("Arial", Font.BOLD, 16));
        chartLabel.setBorder(new EmptyBorder(10, 10, 10, 10));

        panel.add(chartLabel, BorderLayout.NORTH);
        panel.add(chartArea, BorderLayout.CENTER);

        return panel;
    }

    private JTabbedPane createTabsPanel() {
        JTabbedPane tabbedPane = new JTabbedPane();

        JPanel productPanel = new JPanel(new BorderLayout());
        productTable = createProductTable();
        JScrollPane productScrollPane = new JScrollPane(productTable);
        productPanel.add(productScrollPane, BorderLayout.CENTER);

        JPanel supplierPanel = new JPanel(new BorderLayout());
        supplierTable = createSupplierTable();
        JScrollPane supplierScrollPane = new JScrollPane(supplierTable);
        supplierPanel.add(supplierScrollPane, BorderLayout.CENTER);

        tabbedPane.addTab("Sản Phẩm", productPanel);
        tabbedPane.addTab("Nhà Cung Cấp", supplierPanel);

        return tabbedPane;
    }

    private JTable createProductTable() {
        Vector<Vector<Object>> data = new Vector<>();
        Vector<String> columns = new Vector<>();
        columns.add("Mã SP");
        columns.add("Tên SP");
        columns.add("Danh Mục");
        columns.add("Tồn Kho");
        columns.add("Thương Hiệu");
        columns.add("Tình Trạng");

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement("SELECT p.productID, p.name, c.name, p.stockQuantity, p.brand, p.status "
                                                            + "FROM product p "
                                                            + "JOIN category c ON p.category = c.categoryID")) {
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                row.add(rs.getString("productID"));
                row.add(rs.getString("name"));
                row.add(rs.getString("name"));
                row.add(rs.getInt("stockQuantity"));
                row.add(rs.getString("brand"));
                row.add(rs.getString("status"));
                data.add(row);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return new JTable(data, columns);
    }

    private JTable createSupplierTable() {
        Vector<Vector<Object>> data = new Vector<>();
        Vector<String> columns = new Vector<>();
        columns.add("Mã NCC");
        columns.add("Tên NCC");
        columns.add("Địa Chỉ");
        columns.add("Email");
        columns.add("Số ĐT");

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement("SELECT supplierID, name, address, email, phone FROM supplier")) {
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                row.add(rs.getString("supplierID"));
                row.add(rs.getString("name"));
                row.add(rs.getString("address"));
                row.add(rs.getString("email"));
                row.add(rs.getString("phone"));
                data.add(row);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return new JTable(data, columns);
    }

    private int getProductCount() {
        int count = 0;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement("SELECT COUNT(*) FROM product")) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                count = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    private int getOrderCount() {
        int count = 0;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement("SELECT COUNT(*) FROM `order`")) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                count = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    private int getSupplierCount() {
        int count = 0;
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement stmt = conn.prepareStatement("SELECT COUNT(*) FROM supplier")) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                count = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Dashboard");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setContentPane(new FormThongKe());
            frame.setSize(1024, 768);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
    }
}