package component;

import entity.User;
import bus.UserBUS;
import dialog.EmployeeDialog;

import javax.swing.*;
import java.util.List;
import java.util.UUID;
import java.awt.Dimension;
import java.awt.Font;
import java.text.SimpleDateFormat;

public class EmployeeManagementPanel extends BaseManagementPanel {
	private final UserBUS userBUS;
	private final SimpleDateFormat dateFormat;

	public EmployeeManagementPanel() {
		super("Quản lý nhân viên",
				new String[] { "Mã NV", "Họ tên","Tên đăng nhập", "Giới tính", "Ngày sinh", "SDT", "Email", "Vai trò", "Trạng thái"},
				loadEmployeeData());
		userBUS = new UserBUS();
		dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	}

	private static Object[][] loadEmployeeData() {
		UserBUS bus = new UserBUS();
		List<User> users = bus.getAllUsers();
		Object[][] data = new Object[users.size()][8];
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		for (int i = 0; i < users.size(); i++) {
			User user = users.get(i);
			data[i] = new Object[] { user.getUserID(), user.getFullName(),user.getUsername(), user.getGender(),
					sdf.format(user.getBirthDate()), user.getPhone(), user.getEmail(), user.getRole(),
					user.getStatus() };
		}
		return data;
	}

	@Override
	protected void handleAdd() {
		User user = new User();
		user.setUserID(UUID.randomUUID().toString());
		EmployeeDialog dialog = new EmployeeDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Thêm nhân viên",
				user, true);
		dialog.setVisible(true);

		if (dialog.isConfirmed()) {
			
			try {
				userBUS.addUser(user);
				refreshTable();
			} catch (Exception e) {
				JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
			}
		}
	}

	@Override
	protected void handleEdit() {
		int row = table.getSelectedRow();
		if (row >= 0) {
			try {
				String userID = table.getValueAt(row, 0).toString();
				User user = userBUS.getUserById(userID);

				EmployeeDialog dialog = new EmployeeDialog((JFrame) SwingUtilities.getWindowAncestor(this),
						"Sửa nhân viên", user, false);
				dialog.setVisible(true);

				if (dialog.isConfirmed()) {
					userBUS.updateUser(user);
					refreshTable();
				}
			} catch (Exception e) {
				JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
			}
		}
	}

	@Override
	protected void handleDelete() {
		int row = table.getSelectedRow();
		if (row >= 0) {
			try {
				String userID = table.getValueAt(row, 0).toString();
				userBUS.deleteUser(userID);
				refreshTable();
			} catch (Exception e) {
				JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
			}
		}
	}

	@Override
	protected void handleSearch() {
		String keyword = searchField.getText().trim();
		if (!keyword.isEmpty()) {
			updateTableData(userBUS.searchUsers(keyword));
		} else {
			refreshTable();
		}
	}

	private void refreshTable() {
		updateTableData(userBUS.getAllUsers());
	}

	private void updateTableData(List<User> users) {
		tableModel.setRowCount(0);
		for (User user : users) {
			tableModel.addRow(new Object[] { user.getUserID(), user.getFullName(),user.getUsername(), user.getGender(),
					dateFormat.format(user.getBirthDate()), user.getPhone(), user.getEmail(), user.getRole(),
					user.getStatus() });
		}
	}

	@Override
	protected void handleAbout() {
		showDetails();
	}
	private void showDetails()  {
		try {
			int row = table.getSelectedRow();
			String userID = table.getValueAt(row, 0).toString();
			User user = null;
			try {
				user = userBUS.getUserById(userID);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			StringBuilder details = new StringBuilder();
			details.append("Mã NV: ").append(user.getUserID()).append("\n");
			details.append("Họ tên: ").append(user.getFullName()).append("\n");
			details.append("Tên đăng nhập: ").append(user.getUsername()).append("\n");
			details.append("Giới tính: ").append(user.getGender()).append("\n");
			details.append("Ngày sinh: ").append(user.getBirthDate()).append("\n");
			details.append("SDT: ").append(user.getPhone()).append("\n");
			details.append("Email: ").append(user.getEmail()).append("\n");
			details.append("Vai trò: ").append(user.getRole()).append("\n");
			details.append("Trạng thái: ").append(user.getStatus());

			JTextArea textArea = new JTextArea(details.toString());
			textArea.setEditable(false);
			textArea.setFont(new Font("Roboto", Font.PLAIN, 14));
			JScrollPane scrollPane = new JScrollPane(textArea);
			scrollPane.setPreferredSize(new Dimension(400, 300));

			JOptionPane.showMessageDialog(this, scrollPane, "Chi tiết nhân viên", JOptionPane.INFORMATION_MESSAGE);
			
		} catch (Exception e) {
			// TODO: handle exception
			
		}
	
		
	
	}
}