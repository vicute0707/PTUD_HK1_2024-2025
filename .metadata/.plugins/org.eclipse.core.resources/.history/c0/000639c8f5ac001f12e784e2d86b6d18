package component;

import bus.UserRoleBUS;
import dao.PermissionDAO;
import dialog.UserRoleDialog;
import entity.UserRole;
import javax.swing.*;
import java.util.List;

public class UserRoleManagementPanel extends BaseManagementPanel {
	private final UserRoleBUS userRoleBUS;

	public UserRoleManagementPanel() {
		super("Quản lý vai trò", new String[] { "Mã vai trò", "Tên vai trò", "Quyền hạn" }, loadRoleData());
		userRoleBUS = new UserRoleBUS();
	}

	@Override
	protected void handleAdd() {
		UserRole role = new UserRole();
		role.setRoleID(userRoleBUS.generateNewRoleId());

		UserRoleDialog dialog = new UserRoleDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Thêm vai trò",
				role, true);

		dialog.setVisible(true);

		if (dialog.isConfirmed()) {
			try {
				if (userRoleBUS.addRole(role)) {
					refreshTable();
					JOptionPane.showMessageDialog(this, "Thêm vai trò thành công!");
				} else {
					JOptionPane.showMessageDialog(this, "Không thể thêm vai trò", "Lỗi", JOptionPane.ERROR_MESSAGE);
				}
			} catch (Exception e) {
			}
		}
	}

	@Override
	protected void handleAbout() {
		int selectedRow = table.getSelectedRow();
		if (selectedRow < 0) {
			JOptionPane.showMessageDialog(this, "Vui lòng chọn một vai trò để chỉnh sửa");
			return;
		}

		String roleId = table.getValueAt(selectedRow, 0).toString();
		UserRole role = userRoleBUS.getRoleById(roleId);

		if (role != null) {
			UserRoleDialog dialog = new UserRoleDialog((JFrame) SwingUtilities.getWindowAncestor(this),
					"Chỉnh sửa vai trò", role, false);
			dialog.setVisible(true);

			if (dialog.isConfirmed()) {
				try {
					if (userRoleBUS.updateRole(role)) {
						refreshTable();
						JOptionPane.showMessageDialog(this, "Cập nhật vai trò thành công!");
					}
				} catch (Exception e) {
				}
			}
		}
	}

	private static Object[][] loadRoleData() {
		UserRoleBUS bus = new UserRoleBUS();
		List<UserRole> roles = bus.getAllRoles();
		Object[][] data = new Object[roles.size()][3];

		for (int i = 0; i < roles.size(); i++) {
			UserRole role = roles.get(i);
			String permissions = role.getPermissions().replace("[", "").replace("]", "").replace("\"", "");

			data[i] = new Object[] { role.getRoleID(), role.getRoleName(), permissions // This will show the raw
																						// permission IDs from database
			};
		}
		return data;
	}

	private void refreshTable() {
	    tableModel.setRowCount(0);
	    List<UserRole> roles = userRoleBUS.getAllRoles();
	    PermissionDAO permissionDAO = new PermissionDAO();
	    
	    for (UserRole role : roles) {
	        String permissionStr = role.getPermissions()
	            .replace("[", "")
	            .replace("]", "")
	            .replace("\"", "");
	            
	        String[] permIds = permissionStr.split(",");
	        StringBuilder displayPerms = new StringBuilder();
	        
	        for (int i = 0; i < permIds.length; i++) {
	            if (i > 0) displayPerms.append(", ");
	            String permName = permissionDAO.getPermissionNameById(permIds[i].trim());
	            displayPerms.append(permName);
	        }
	        
	        tableModel.addRow(new Object[]{
	            role.getRoleID(),
	            role.getRoleName(),
	            displayPerms.toString()
	        });
	    }
	}

	@Override
	protected void handleEdit() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void handleDelete() {
		// TODO Auto-generated method stub
		
	}

}
