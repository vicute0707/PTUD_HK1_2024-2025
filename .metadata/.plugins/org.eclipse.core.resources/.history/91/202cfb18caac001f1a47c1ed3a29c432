package component;

import entity.User;
import bus.UserBUS;
import dialog.EmployeeDialog;

import javax.swing.*;
import java.util.List;
import java.util.UUID;
import java.text.SimpleDateFormat;

public class EmployeeManagementPanel extends BaseManagementPanel {
	private final UserBUS userBUS;
	private final SimpleDateFormat dateFormat;

	public EmployeeManagementPanel() {
		super("Quản lý nhân viên",
				new String[] { "Mã NV", "Họ tên","Tên đăng nhập", "Giới tính", "Ngày sinh", "SDT", "Email", "Vai trò", "Trạng thái"},
				loadEmployeeData());
		userBUS = new UserBUS();
		dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	}

	private static Object[][] loadEmployeeData() {
		UserBUS bus = new UserBUS();
		List<User> users = bus.getAllUsers();
		Object[][] data = new Object[users.size()][8];
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		for (int i = 0; i < users.size(); i++) {
			User user = users.get(i);
			data[i] = new Object[] { user.getUserID(), user.getFullName(),user.getUsername(), user.getGender(),
					sdf.format(user.getBirthDate()), user.getPhone(), user.getEmail(), user.getRole(),
					user.getStatus() };
		}
		return data;
	}

	@Override
	protected void handleAdd() {
		User user = new User();
		user.setUserID(UUID.randomUUID().toString());
		EmployeeDialog dialog = new EmployeeDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Thêm nhân viên",
				user, true);
		dialog.setVisible(true);

		if (dialog.isConfirmed()) {
			try {
				userBUS.addUser(user);
				refreshTable();
			} catch (Exception e) {
				JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
			}
		}
	}

	@Override
	protected void handleEdit() {
		int row = table.getSelectedRow();
		if (row >= 0) {
			try {
				String userID = table.getValueAt(row, 0).toString();
				User user = userBUS.getUserById(userID);

				EmployeeDialog dialog = new EmployeeDialog((JFrame) SwingUtilities.getWindowAncestor(this),
						"Sửa nhân viên", user, false);
				dialog.setVisible(true);

				if (dialog.isConfirmed()) {
					userBUS.updateUser(user);
					refreshTable();
				}
			} catch (Exception e) {
				JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
			}
		}
	}

	@Override
	protected void handleDelete() {
		int row = table.getSelectedRow();
		if (row >= 0) {
			try {
				String userID = table.getValueAt(row, 0).toString();
				userBUS.deleteUser(userID);
				refreshTable();
			} catch (Exception e) {
				JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
			}
		}
	}

	@Override
	protected void handleSearch() {
		String keyword = searchField.getText().trim();
		if (!keyword.isEmpty()) {
			updateTableData(userBUS.searchUsers(keyword));
		} else {
			refreshTable();
		}
	}

	private void refreshTable() {
		updateTableData(userBUS.getAllUsers());
	}

	private void updateTableData(List<User> users) {
		tableModel.setRowCount(0);
		for (User user : users) {
			tableModel.addRow(new Object[] { user.getUserID(), user.getFullName(),user.getUsername(), user.getGender(),
					dateFormat.format(user.getBirthDate()), user.getPhone(), user.getEmail(), user.getRole(),
					user.getStatus() });
		}
	}
}