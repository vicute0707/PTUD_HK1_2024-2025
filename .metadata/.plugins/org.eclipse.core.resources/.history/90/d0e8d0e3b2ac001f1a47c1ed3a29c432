package component;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.border.LineBorder;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import java.sql.*;


public class ButtonPermissionManager {
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 192, 203);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Color DISABLED_COLOR = new Color(200, 200, 200);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);

    // Permission constants matching database
    public static final String PERM_USER_MANAGEMENT = "PERM001";  // Quản lý người dùng
    public static final String PERM_PRODUCT_MANAGEMENT = "PERM002"; // Quản lý sản phẩm
    public static final String PERM_ORDER_MANAGEMENT = "PERM003";  // Quản lý đơn hàng

    private static String currentUserRole = null;


    public static void setCurrentUser(String username) {
        try {
            Connection conn = getConnection(); // Implement your connection method
            PreparedStatement stmt = conn.prepareStatement(
                "SELECT r.permissions FROM user u " +
                "JOIN userrole r ON u.role = r.roleID " +
                "WHERE u.username = ? AND u.status = 'active'"
            );
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            
            if (rs.next()) {
                String permissionsJson = rs.getString("permissions");
                userPermissions = new JSONArray(permissionsJson);
            }
            
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi khi lấy quyền người dùng: " + e.getMessage());
        }
    }

    public JButton createButton(String text, String iconPath, boolean isRounded, String requiredPermission) {
        JButton button = new JButton(text);
        button.setFont(CONTENT_FONT);

        // Set icon
        if (iconPath != null && !iconPath.isEmpty()) {
            ImageIcon icon = new ImageIcon(getClass().getResource(iconPath));
            button.setIcon(icon);
        }

        // Set border
        if (isRounded) {
            button.setBorder(new LineBorder(new Color(230, 230, 230), 1, true));
        } else {
            button.setBorder(BorderFactory.createEmptyBorder());
        }

        // Basic setup
        button.setFocusPainted(false);
        button.setContentAreaFilled(true);
        button.setBackground(Color.WHITE);
        button.setPreferredSize(new Dimension(text.isEmpty() ? 38 : 130, 38));

        // Check permissions
        boolean hasPermission = checkPermission(requiredPermission);
        button.setEnabled(hasPermission);

        if (!hasPermission) {
            button.setBackground(DISABLED_COLOR);
            button.setToolTipText("Bạn không có quyền thực hiện chức năng này");
        } else {
            // Hover effects for enabled buttons
            button.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent e) {
                    if (button.isEnabled() && !button.getForeground().equals(Color.WHITE)) {
                        button.setBackground(HOVER_COLOR);
                    }
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    if (button.isEnabled()) {
                        if (button.getForeground().equals(Color.WHITE)) {
                            button.setBackground(PRIMARY_COLOR);
                        } else {
                            button.setBackground(Color.WHITE);
                        }
                    }
                }
            });
        }

        return button;
    }

    private boolean checkPermission(String requiredPermission) {
        if (userPermissions == null) return false;
        if (requiredPermission == null) return true;
        
        for (int i = 0; i < userPermissions.length(); i++) {
            if (userPermissions.getString(i).equals(requiredPermission)) {
                return true;
            }
        }
        return false;
    }

    // Convenience methods for common buttons
    public JButton createProductButton(String text, String iconPath, boolean isRounded) {
        return createButton(text, iconPath, isRounded, PERM_PRODUCT_MANAGEMENT);
    }

    public JButton createOrderButton(String text, String iconPath, boolean isRounded) {
        return createButton(text, iconPath, isRounded, PERM_ORDER_MANAGEMENT);
    }

    public JButton createUserManagementButton(String text, String iconPath, boolean isRounded) {
        return createButton(text, iconPath, isRounded, PERM_USER_MANAGEMENT);
    }

    // Pre-configured buttons
    public JButton createAddProductButton() {
        JButton btn = createProductButton("Thêm mới", "/icon/circle-plus.png", true);
        btn.setBackground(PRIMARY_COLOR);
        btn.setForeground(Color.WHITE);
        return btn;
    }

    public JButton createEditProductButton() {
        return createProductButton("Sửa", "/icon/pencil.png", true);
    }

    public JButton createDeleteProductButton() {
        return createProductButton("Xóa", "/icon/trash.png", true);
    }

    public JButton createExportButton() {
        return createProductButton("Xuất Excel", "/icon/printer.png", true);
    }

    public JButton createInfoButton() {
        return createButton("About", "/icon/info.png", true, null); // No permission required
    }

    public JButton createSearchButton() {
        return createButton("", "/icon/search.png", false, null); // No permission required
    }
}