package dialog;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.logging.Logger;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;

import style.StyleButton;

public class ChiTietPhieuNhap extends JDialog {
    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);
    private static final Color CONTENT_COLOR = new Color(255, 242, 242);
    private static final Color HOVER_COLOR = new Color(252, 231, 243);
    private static final Font HEADER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 14);
    private static final Font CONTENT_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 12);
    private static final Font TITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 16);
    
    // Add logging
    private static final Logger LOGGER = Logger.getLogger(ChiTietPhieuNhap.class.getName());

    public void chiTietPhieuNhap(JTable table, DefaultTableModel detailModel) {
        try {
            // Validate input parameters
            if (table == null || detailModel == null) {
                throw new IllegalArgumentException("Table and detail model cannot be null");
            }

            int selectedRow = table.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(
                    this,
                    "Vui lòng chọn phiếu nhập cần xem chi tiết!",
                    "Thông báo",
                    JOptionPane.WARNING_MESSAGE
                );
                return;
            }

            // Extract and validate data from the table
            String maPhieu = getTableValueSafely(table, selectedRow, 0);
            String nhaCungCap = getTableValueSafely(table, selectedRow, 1);
            String nhanVien = getTableValueSafely(table, selectedRow, 2);
            String thoiGian = getTableValueSafely(table, selectedRow, 3);
            String tongTien = getTableValueSafely(table, selectedRow, 4);

            // Create and configure the detail dialog
            JDialog detailDialog = createDetailDialog();
            
            // Create the main content panel
            JPanel contentPanel = createContentPanel();
            
            // Add import information
            JPanel infoPanel = createInfoPanel(maPhieu, nhaCungCap, nhanVien, thoiGian, tongTien);
            contentPanel.add(infoPanel);
            contentPanel.add(Box.createVerticalStrut(20));

            // Create and add the detail table
            JTable detailTable = createDetailTable(detailModel);
            contentPanel.add(createDetailTablePanel(detailTable));

            // Add button panel
            JPanel buttonPanel = createButtonPanel(detailDialog, maPhieu);

            // Assemble the dialog
            detailDialog.add(contentPanel, BorderLayout.CENTER);
            detailDialog.add(buttonPanel, BorderLayout.SOUTH);

            // Display the dialog
            detailDialog.setSize(800, 600);
            detailDialog.setLocationRelativeTo(this);
            detailDialog.setVisible(true);

            LOGGER.info("Successfully displayed import details for import ID: " + maPhieu);

        } catch (Exception e) {
            LOGGER.severe("Error displaying import details: " + e.getMessage());
            JOptionPane.showMessageDialog(
                this,
                "Có lỗi xảy ra khi hiển thị chi tiết phiếu nhập: " + e.getMessage(),
                "Lỗi",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private String getTableValueSafely(JTable table, int row, int column) {
        Object value = table.getValueAt(row, column);
        return value != null ? value.toString() : "";
    }

    private JDialog createDetailDialog() {
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Chi tiết phiếu nhập", true);
        dialog.setLayout(new BorderLayout());
        return dialog;
    }

    private JPanel createContentPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(Color.WHITE);
        panel.setBorder(new EmptyBorder(20, 30, 20, 30));
        return panel;
    }

    private JPanel createInfoPanel(String maPhieu, String nhaCungCap, String nhanVien, 
                                 String thoiGian, String tongTien) {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(Color.WHITE);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 15);

        addDetailField(panel, "Mã phiếu:", maPhieu, gbc, 0);
        addDetailField(panel, "Nhà cung cấp:", nhaCungCap, gbc, 1);
        addDetailField(panel, "Nhân viên:", nhanVien, gbc, 2);
        addDetailField(panel, "Thời gian:", thoiGian, gbc, 3);
        addDetailField(panel, "Tổng tiền:", tongTien, gbc, 4);

        return panel;
    }

    private JPanel createDetailTablePanel(JTable detailTable) {
        JPanel tablePanel = new JPanel(new BorderLayout());
        tablePanel.setBackground(Color.WHITE);

        JLabel detailLabel = new JLabel("Chi tiết sản phẩm");
        detailLabel.setFont(HEADER_FONT);
        detailLabel.setForeground(PRIMARY_COLOR);
        tablePanel.add(detailLabel, BorderLayout.NORTH);

        JScrollPane scrollPane = new JScrollPane(detailTable);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(230, 230, 230)));
        customizeScrollPane(scrollPane);
        
        tablePanel.add(Box.createVerticalStrut(10), BorderLayout.CENTER);
        tablePanel.add(scrollPane, BorderLayout.SOUTH);

        return tablePanel;
    }

    private void customizeScrollPane(JScrollPane scrollPane) {
        scrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = PRIMARY_COLOR;
                this.trackColor = new Color(245, 245, 245);
            }
        });
    }

    private JPanel createButtonPanel(JDialog dialog, String maPhieu) {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        panel.setBackground(Color.WHITE);

        StyleButton styleButton = new StyleButton();

        JButton printButton = new JButton("In phiếu");
        styleButton.styleButton(printButton, true);
        printButton.addActionListener(e -> handlePrintButton(dialog, maPhieu));

        JButton closeButton = new JButton("Đóng");
        styleButton.styleButton(closeButton, false);
        closeButton.addActionListener(e -> dialog.dispose());

        panel.add(printButton);
        panel.add(closeButton);

        return panel;
    }

    private void handlePrintButton(JDialog dialog, String maPhieu) {
        try {
            // TODO: Implement actual printing functionality
            JOptionPane.showMessageDialog(dialog,
                "Đang in phiếu " + maPhieu,
                "Thông báo",
                JOptionPane.INFORMATION_MESSAGE);
            LOGGER.info("Print requested for import ID: " + maPhieu);
        } catch (Exception e) {
            LOGGER.severe("Error printing import: " + e.getMessage());
            JOptionPane.showMessageDialog(dialog,
                "Lỗi khi in phiếu: " + e.getMessage(),
                "Lỗi",
                JOptionPane.ERROR_MESSAGE);
        }
    }


	private void addDetailField(JPanel panel, String label, String value, GridBagConstraints gbc, int row) {
        gbc.gridy = row;
        
        // Label
        gbc.gridx = 0;
        JLabel lblField = new JLabel(label);
        lblField.setFont(CONTENT_FONT);
        panel.add(lblField, gbc);
        
        // Value
        gbc.gridx = 1;
        JLabel lblValue = new JLabel(value);
        lblValue.setFont(CONTENT_FONT);
        panel.add(lblValue, gbc);
    }
	  private void setupDetailTable(JTable table) {
	        table.setFont(CONTENT_FONT);
	        table.setRowHeight(35);
	        table.setGridColor(new Color(230, 230, 230));
	        table.setShowVerticalLines(true);
	        table.setShowHorizontalLines(true);

	        // Setup header
	        JTableHeader header = table.getTableHeader();
	        header.setFont(HEADER_FONT);
	        header.setBackground(Color.WHITE);
	        header.setForeground(Color.BLACK);
	        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40));

	        // Setup cell renderers
	        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
	        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
	        
	        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
	        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);

	        // Áp dụng cell renderer
	        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // Mã SP
	        table.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);  // Đơn giá
	        table.getColumnModel().getColumn(4).setCellRenderer(centerRenderer); // Số lượng
	        table.getColumnModel().getColumn(5).setCellRenderer(rightRenderer);  // Thành tiền
	    }

}


