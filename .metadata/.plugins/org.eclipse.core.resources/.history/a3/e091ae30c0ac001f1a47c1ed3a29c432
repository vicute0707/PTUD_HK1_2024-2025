package component;

import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;

public abstract class BaseManagementPanel extends JPanel {
	protected static final Color CONTENT_COLOR = new Color(255, 192, 203);
	protected static final Color HOVER_COLOR = new Color(252, 231, 243);
	protected static final Font HEADER_FONT = new Font("Arial", Font.BOLD, 12);
	protected static final Font CONTENT_FONT = new Font("Arial", Font.PLAIN, 12);
	protected static final Color PRIMARY_COLOR = new Color(219, 39, 119);

	protected JTable table;
	protected String title;
	protected String[] columnNames;
	protected Object[][] data;

	public BaseManagementPanel(String title, String[] columnNames, Object[][] data) {
		this.title = title;
		this.columnNames = columnNames;
		this.data = data;
		initComponents();
	}

	protected void initComponents() {
		setLayout(new BorderLayout());
		setBackground(Color.WHITE);

		// Create table
		DefaultTableModel model = new DefaultTableModel(data, columnNames) {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};

		table = new JTable(model);
		table.setFont(CONTENT_FONT);
		table.getTableHeader().setFont(HEADER_FONT);
		table.setSelectionBackground(HOVER_COLOR);
		table.setGridColor(Color.LIGHT_GRAY);

		// Set custom renderer if needed
		TableCellRenderer customRenderer = createCustomRenderer();
		if (customRenderer != null) {
			table.setDefaultRenderer(Object.class, customRenderer);
		}

		// Add table to scroll pane
		JScrollPane scrollPane = new JScrollPane(table);
		add(scrollPane, BorderLayout.CENTER);

		// Add toolbar
		JToolBar toolbar = createToolBar();
		add(toolbar, BorderLayout.NORTH);
	}

	protected JToolBar createToolBar() {
		JToolBar toolbar = new JToolBar();
		toolbar.setFloatable(false);
		toolbar.setBackground(Color.WHITE);

		// Add buttons
		JButton addButton = new JButton("Thêm");
		JButton editButton = new JButton("Sửa");
		JButton deleteButton = new JButton("Xóa");
		JButton exportButton = new JButton("Xuất Excel");
		JButton aboutButton = new JButton("Thông tin");

		// Add action listeners
		addButton.addActionListener(e -> handleAdd());
		editButton.addActionListener(e -> handleEdit());
		deleteButton.addActionListener(e -> handleDelete());
		exportButton.addActionListener(e -> handleExport());
		aboutButton.addActionListener(e -> handleAbout());

		// Add components to toolbar
		toolbar.add(addButton);
		toolbar.add(editButton);
		toolbar.add(deleteButton);
		toolbar.add(exportButton);
		toolbar.add(aboutButton);

		return toolbar;
	}

	// Default implementations of handlers
	protected abstract void handleAdd();

	protected void handleEdit() {
		if (table.getSelectedRow() == -1) {
			JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để chỉnh sửa", "Thông báo",
					JOptionPane.WARNING_MESSAGE);
			return;
		}
		JOptionPane.showMessageDialog(this, "Chức năng chỉnh sửa sẽ được thực hiện tại đây", "Chỉnh sửa",
				JOptionPane.INFORMATION_MESSAGE);
	}

	protected void handleDelete() {
		if (table.getSelectedRow() == -1) {
			JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để xóa", "Thông báo",
					JOptionPane.WARNING_MESSAGE);
			return;
		}

		int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa mục này?", "Xác nhận xóa",
				JOptionPane.YES_NO_OPTION);

		if (confirm == JOptionPane.YES_OPTION) {
			DefaultTableModel model = (DefaultTableModel) table.getModel();
			model.removeRow(table.getSelectedRow());
		}
	}

	protected void handleExport() {
		JOptionPane.showMessageDialog(this, "Chức năng xuất Excel sẽ được thực hiện tại đây", "Xuất Excel",
				JOptionPane.INFORMATION_MESSAGE);
	}

	protected void handleAbout() {
		JOptionPane.showMessageDialog(this, "Thông tin về " + title, "Thông tin", JOptionPane.INFORMATION_MESSAGE);
	}

	protected TableCellRenderer createCustomRenderer() {
		return new CenterAlignRenderer();
	}
}