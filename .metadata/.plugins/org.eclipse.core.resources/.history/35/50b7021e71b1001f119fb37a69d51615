package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.*;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.RoundRectangle2D;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;

import dao.DashboardDAO;
import entity.DashboardStats;

public class Form_TrangChu extends JPanel {
	 private static final long serialVersionUID = 1L;

	    // Color scheme constants
	    // These colors create a cohesive pink-themed design that's both professional and visually appealing
	    private static final Color BACKGROUND_COLOR = new Color(249, 250, 251);  // Light gray background for contrast
	    private static final Color PRIMARY_COLOR = new Color(219, 39, 119);      // Main pink accent color
	    private static final Color HEADING_COLOR = new Color(17, 24, 39);        // Dark gray for headings
	    
	    // Card background colors with subtle transparency for depth
	    private static final Color CARD_1_COLOR = new Color(251, 207, 232, 200); // Light pink
	    private static final Color CARD_2_COLOR = new Color(249, 168, 212, 200); // Medium pink
	    private static final Color CARD_3_COLOR = new Color(244, 114, 182, 200); // Darker pink
	    private static final Color CARD_4_COLOR = new Color(236, 72, 153, 200);  // Deep pink
	    private static final Color CARD_TEXT_COLOR = new Color(131, 24, 67);     // Dark pink for text

	    // Font definitions using Roboto for modern typography
	    // We use different sizes and weights to create visual hierarchy
	    private static final Font WELCOME_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 28);    // Large welcome text
	    private static final Font SUBTITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 16);  // Smaller subtitle text
	    private static final Font CARD_TITLE_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 16); // Card headers
	    private static final Font CARD_NUMBER_FONT = new Font(FlatRobotoFont.FAMILY, Font.BOLD, 24);// Large statistics
	    private static final Font CARD_LABEL_FONT = new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 14);// Card descriptions

	    // Instance variables for managing updates
	    private Timer updateTimer;        // Controls periodic data refresh
	    private DashboardDAO dashboardDAO; // Data access object for statistics

	public Form_TrangChu() {
		this.dashboardDAO = new DashboardDAO();
		initComponents();
		startDataUpdates();
	}

	private void initComponents() {
		setLayout(new BorderLayout(20, 20));
		setBackground(BACKGROUND_COLOR);
		setBorder(new EmptyBorder(30, 40, 30, 40));

		// Welcome section with greeting and date
		add(createWelcomeSection(), BorderLayout.NORTH);

		// Main content with statistics cards
		add(createMainContent(), BorderLayout.CENTER);
	}
	

	private JPanel createWelcomeSection() {
		JPanel welcomePanel = new JPanel(new BorderLayout(10, 10));
		welcomePanel.setOpaque(false);

		// Welcome message
		JLabel welcomeLabel = new JLabel("Chào mừng trở lại!");
		welcomeLabel.setFont(WELCOME_FONT);
		welcomeLabel.setForeground(HEADING_COLOR);

		// Current date and time
		JLabel dateLabel = new JLabel(getCurrentDateTime());
		dateLabel.setFont(SUBTITLE_FONT);
		dateLabel.setForeground(PRIMARY_COLOR);

		welcomePanel.add(welcomeLabel, BorderLayout.NORTH);
		welcomePanel.add(dateLabel, BorderLayout.CENTER);

		return welcomePanel;
	}

	private String getCurrentDateTime() {
		return new SimpleDateFormat("EEEE, dd MMMM yyyy", new Locale("vi", "VN")).format(new Date());
	}

	private JPanel createMainContent() {
		JPanel mainPanel = new JPanel(new BorderLayout(20, 20));
		mainPanel.setOpaque(false);

		// Statistics cards at the top
		JPanel statsPanel = new JPanel(new GridLayout(1, 4, 20, 0));
		statsPanel.setOpaque(false);

		// Add cards with updated modern design
		statsPanel.add(createModernCard("Nhân viên", "0", "Đang làm việc", CARD_1_COLOR, "/icon/users.png"));
		statsPanel.add(createModernCard("Sản phẩm", "0", "Trong kho", CARD_2_COLOR, "/icon/shirt.png"));
		statsPanel.add(createModernCard("Nhà cung cấp", "0", "Đang hợp tác", CARD_3_COLOR, "/icon/container.png"));
		statsPanel
				.add(createModernCard("Doanh thu", "0", "Tháng này", CARD_4_COLOR, "/icon/chart-no-axes-combined.png"));

		mainPanel.add(statsPanel, BorderLayout.NORTH);

		// You can add more sections here like recent activities, quick actions, etc.

		return mainPanel;
	}

	private JPanel createModernCard(String title, String number, String label, Color backgroundColor, String iconPath) {
		JPanel card = new JPanel() {
			@Override
			protected void paintComponent(Graphics g) {
				// Create high-quality rendering
				Graphics2D g2 = (Graphics2D) g.create();
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

				// Draw multi-layer shadow for depth
				for (int i = 0; i < 4; i++) {
					g2.setColor(new Color(0, 0, 0, 10 - i * 2));
					g2.fillRoundRect(i, i, getWidth() - (i * 2), getHeight() - (i * 2), 15, 15);
				}

				// Draw card background with slight gradient
				GradientPaint gradient = new GradientPaint(0, 0, backgroundColor, 0, getHeight(), new Color(
						backgroundColor.getRed(), backgroundColor.getGreen(), backgroundColor.getBlue(), 240));
				g2.setPaint(gradient);
				g2.fillRoundRect(0, 0, getWidth() - 3, getHeight() - 3, 15, 15);

				g2.dispose();
			}
		};

		// Set up card layout and properties
		card.setLayout(new BorderLayout(10, 5));
		card.setPreferredSize(new Dimension(250, 120));
		card.setBorder(BorderFactory.createEmptyBorder(15, 20, 15, 20));
		card.setOpaque(false);

		// Add hover effect
		addHoverEffect(card, backgroundColor);

		// Create icon and title panel
		JPanel topPanel = createCardHeader(title, iconPath);

		// Create content panel with number and label
		JPanel contentPanel = createCardContent(number, label);

		card.add(topPanel, BorderLayout.NORTH);
		card.add(contentPanel, BorderLayout.CENTER);

		return card;
	}

	private void addHoverEffect(JPanel card, Color baseColor) {
		card.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				// Brighten color slightly on hover
				card.setBackground(brightenColor(baseColor, 0.1f));
				card.setCursor(new Cursor(Cursor.HAND_CURSOR));
				card.repaint();
			}

			@Override
			public void mouseExited(MouseEvent e) {
				card.setBackground(baseColor);
				card.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
				card.repaint();
			}
		});
	}

	private Color brightenColor(Color color, float factor) {
		// Create brighter version of color for hover effect
		int red = Math.min(255, (int) (color.getRed() * (1 + factor)));
		int green = Math.min(255, (int) (color.getGreen() * (1 + factor)));
		int blue = Math.min(255, (int) (color.getBlue() * (1 + factor)));
		return new Color(red, green, blue, color.getAlpha());
	}

	private JPanel createCardHeader(String title, String iconPath) {
		JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
		topPanel.setOpaque(false);

		// Load and scale icon
		if (iconPath != null) {
			ImageIcon originalIcon = new ImageIcon(getClass().getResource(iconPath));
			Image scaledImage = originalIcon.getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH);
			JLabel iconLabel = new JLabel(new ImageIcon(scaledImage));
			iconLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));
			topPanel.add(iconLabel);
		}

		// Add title with modern font
		JLabel titleLabel = new JLabel(title);
		titleLabel.setFont(CARD_TITLE_FONT);
		titleLabel.setForeground(CARD_TEXT_COLOR);
		topPanel.add(titleLabel);

		return topPanel;
	}

	private JPanel createCardContent(String number, String label) {
		JPanel contentPanel = new JPanel();
		contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
		contentPanel.setOpaque(false);

		// Create number display
		JLabel numberLabel = new JLabel(number);
		numberLabel.setFont(CARD_NUMBER_FONT);
		numberLabel.setForeground(CARD_TEXT_COLOR);
		numberLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

		// Create description label
		JLabel descLabel = new JLabel(label);
		descLabel.setFont(CARD_LABEL_FONT);
		descLabel.setForeground(CARD_TEXT_COLOR);
		descLabel.setAlignmentX(Component.LEFT_ALIGNMENT);

		// Add vertical spacing
		contentPanel.add(Box.createVerticalStrut(5));
		contentPanel.add(numberLabel);
		contentPanel.add(Box.createVerticalStrut(3));
		contentPanel.add(descLabel);

		return contentPanel;
	}

	private void updateDashboard() {
		DashboardStats stats = dashboardDAO.getDashboardStats();

		// Format numbers with Vietnamese locale
		Locale vnLocale = new Locale("vi", "VN");
		String staffCount = String.format(vnLocale, "%d", stats.getTotalActiveStaff());
		String productCount = String.format(vnLocale, "%,d", stats.getTotalProducts());
		String supplierCount = String.format(vnLocale, "%d", stats.getTotalSuppliers());

		// Format revenue in millions with one decimal place
		double revenueInMillions = stats.getMonthlyRevenue() / 1000000.0;
		String revenue = String.format(vnLocale, "%.1fM", revenueInMillions);

		// Remove existing cards
		for (Component comp : getComponents()) {
			if (comp instanceof JPanel && ((JPanel) comp).getComponentCount() > 0) {
				Component firstChild = ((JPanel) comp).getComponent(0);
				if (firstChild instanceof JPanel && !(firstChild instanceof JLabel)) {
					remove(comp);
				}
			}
		}

		// Add updated cards
		add(createMainContent());

		// Refresh display
		revalidate();
		repaint();
	}

	public void startDataUpdates() {
		// Update immediately on startup
		updateDashboard();

		// Create timer for periodic updates (every 30 seconds)
		updateTimer = new Timer(30000, e -> {
			updateDashboard();
		});
		updateTimer.start();
	}

	public void stopDataUpdates() {
		if (updateTimer != null && updateTimer.isRunning()) {
			updateTimer.stop();
		}
	}
}