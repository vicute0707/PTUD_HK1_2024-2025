package dao;

import entity.SanPham;
import entity.DanhMuc;
import connection.MyConnection;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class SanPhamDAO {
	private static final Logger LOGGER = Logger.getLogger(SanPhamDAO.class.getName());
	private MyConnection myConnection;

	public SanPhamDAO() {
		myConnection = new MyConnection();
	}

	public ArrayList<SanPham> getAllSanPham() {
		ArrayList<SanPham> dsSanPham = new ArrayList<>();
		String sql = """
				SELECT p.*, c.name as category_name
				FROM product p
				LEFT JOIN category c ON p.category = c.categoryID
				ORDER BY p.productID
				""";

		try (Connection conn = myConnection.connect();
				PreparedStatement pst = conn.prepareStatement(sql);
				ResultSet rs = pst.executeQuery()) {

			while (rs.next()) {
				SanPham sp = new SanPham();

				// Set thông tin cơ bản
				sp.setMaSP(rs.getString("productID"));
				sp.setTenSP(rs.getString("name"));
				sp.setSoLuongTonKho(rs.getInt("stockQuantity"));
				sp.setThuongHieu(rs.getString("brand"));
				sp.setHinhAnh(rs.getString("imagePath"));

				sp.setTinhTrang(rs.getString("status"));

				// Set danh mục
				DanhMuc dm = new DanhMuc();
				dm.setMaDM(rs.getString("category"));
				dm.setTenDM(rs.getString("category_name"));
				sp.setDanhmuc(dm);

				dsSanPham.add(sp);
			}
			LOGGER.info("Đã lấy " + dsSanPham.size() + " sản phẩm từ database");
			return dsSanPham;

		} catch (SQLException e) {
			LOGGER.severe("Lỗi khi lấy danh sách sản phẩm: " + e.getMessage());
			return new ArrayList<>();
		}
	}

	public boolean addSanPham(SanPham sp) {
		String sql = "INSERT INTO product (productID, name, category, brand, imagePath, stockQuantity, status) VALUES (?, ?, ?, ?, ?, ?, ?)";

		try (Connection conn = myConnection.connect(); PreparedStatement pst = conn.prepareStatement(sql)) {

			pst.setString(1, sp.getMaSP());
			pst.setString(2, sp.getTenSP());
			pst.setString(3, sp.getDanhmuc().getMaDM());
			pst.setString(4, sp.getThuongHieu());
			pst.setString(5, sp.getHinhAnh());
			pst.setInt(6, sp.getSoLuongTonKho());
			pst.setString(7, sp.getTinhTrang());

			boolean result = pst.executeUpdate() > 0;
			LOGGER.info("Thêm sản phẩm " + (result ? "thành công" : "thất bại") + ": " + sp.getMaSP());
			return result;

		} catch (SQLException e) {
			LOGGER.severe("Lỗi thêm sản phẩm: " + e.getMessage());
			return false;
		}
	}

	public String getLastProductID() {
		String sql = "SELECT productID FROM product ORDER BY CAST(SUBSTRING(productID, 3) AS UNSIGNED) DESC LIMIT 1";

		try (Connection conn = myConnection.connect();
				PreparedStatement pst = conn.prepareStatement(sql);
				ResultSet rs = pst.executeQuery()) {

			if (rs.next()) {
				return rs.getString("productID");
			}
			return "SP000";
		} catch (SQLException e) {
			LOGGER.severe("Lỗi lấy mã sản phẩm cuối: " + e.getMessage());
			return "SP000";
		}
	}

	public boolean updateSanPham(SanPham sp) {
		String sql = "UPDATE Product SET name = ?, category = ?, stockQuantity = ?, "
				+ "brand = ?, imagePath = ?, status = ? WHERE productID = ?";

		try (Connection conn = myConnection.connect(); PreparedStatement pst = conn.prepareStatement(sql)) {
			pst.setString(1, sp.getTenSP()); // name
			pst.setString(2, sp.getDanhmuc().getMaDM()); // category
			pst.setInt(3, sp.getSoLuongTonKho()); // stockQuantity
			pst.setString(4, sp.getThuongHieu()); // brand
			pst.setString(5, sp.getHinhAnh()); // imagePath
			pst.setString(6, "Đang kinh doanh"); // status
			pst.setString(7, sp.getMaSP()); // productID for WHERE clause
			boolean result = pst.executeUpdate() > 0;
			LOGGER.info("Cập nhật sản phẩm " + (result ? "thành công" : "thất bại") + ": " + sp.getMaSP());
			return result;

		} catch (SQLException e) {
			LOGGER.severe("Lỗi cập nhật sản phẩm: " + e.getMessage());
			return false;
		}
	}

	public boolean deleteSanPham(String maSP) {
		String sql = "CALL sp_DeleteProduct(?)";

		try (Connection conn = myConnection.connect(); CallableStatement cs = conn.prepareCall(sql)) {

			cs.setString(1, maSP);
			boolean result = cs.executeUpdate() > 0;
			LOGGER.info("Xóa sản phẩm " + (result ? "thành công" : "thất bại") + ": " + maSP);
			return result;

		} catch (SQLException e) {
			LOGGER.severe("Lỗi xóa sản phẩm: " + e.getMessage());
			return false;
		}
	}

	public SanPham getSanPhamByID(String productID) {
		SanPham product = null;
		try {
			// Kết nối cơ sở dữ liệu và truy vấn sản phẩm dựa trên productID
			Connection conn = myConnection.connect();
			String sql = "SELECT p.*, c.name as category_name FROM product p "
					+ "LEFT JOIN category c ON p.category = c.categoryID " + "WHERE p.productID = ?";
			PreparedStatement stmt = conn.prepareStatement(sql);
			stmt.setString(1, productID);
			ResultSet rs = stmt.executeQuery();

			if (rs.next()) {
				product = new SanPham();
				product.setMaSP(rs.getString("productID"));
				product.setTenSP(rs.getString("name"));
				// Lấy thông tin danh mục
				String categoryID = rs.getString("category");
				DanhMuc danhMuc = new DanhMuc();
				danhMuc.setMaDM(categoryID);
				danhMuc.setTenDM(rs.getString("category_name"));
				product.setDanhmuc(danhMuc);
				product.setSoLuongTonKho(rs.getInt("stockQuantity"));
				product.setThuongHieu(rs.getString("brand"));
				product.setTinhTrang(rs.getString("status"));
				product.setHinhAnh(rs.getString("imagePath"));
			}
		} catch (SQLException e) {
			LOGGER.severe("Lỗi khi lấy thông tin sản phẩm: " + e.getMessage());
		} finally {
			myConnection.closeConnection();
		}
		return product;
	}

	private SanPham createSanPhamFromResultSet(ResultSet rs) throws SQLException {
		SanPham sp = new SanPham();
		sp.setMaSP(rs.getString("productID"));
		sp.setTenSP(rs.getString("name"));
		sp.setSoLuongTonKho(rs.getInt("stockQuantity"));
		sp.setThuongHieu(rs.getString("brand"));
		sp.setHinhAnh(rs.getString("imagePath"));

		DanhMuc dm = new DanhMuc();
		dm.setMaDM(rs.getString("category"));
		dm.setTenDM(rs.getString("category_name"));
		sp.setDanhmuc(dm);

		sp.setTinhTrang(getTinhTrangText(rs.getInt("stockQuantity")));

		return sp;
	}

	private String getTinhTrangText(int soLuong) {
		if (soLuong <= 0)
			return "Hết hàng";
		if (soLuong <= 10)
			return "Sắp hết";
		return "Còn hàng";
	}

	public String getLastProductId() {
		String sql = "SELECT productID FROM product ORDER BY productID DESC LIMIT 1";

		try (Connection conn = myConnection.connect();
				PreparedStatement pst = conn.prepareStatement(sql);
				ResultSet rs = pst.executeQuery()) {

			if (rs.next()) {
				return rs.getString("productID");
			}
			return "PRD000";

		} catch (SQLException e) {
			LOGGER.severe("Lỗi lấy mã sản phẩm cuối cùng: " + e.getMessage());
			return "PRD000";
		}
	}

	public List<SanPham> getSanPhamByCategory(String categoryId) {
	    List<SanPham> products = new ArrayList<>();
	    String sql = """
	            SELECT p.*, c.name as category_name 
	            FROM product p
	            LEFT JOIN category c ON p.category = c.categoryID
	            WHERE p.category = ?
	            """;
	    
	    try (Connection conn = myConnection.connect();
	         PreparedStatement pst = conn.prepareStatement(sql)) {
	        
	        pst.setString(1, categoryId);
	        ResultSet rs = pst.executeQuery();
	        
	        while (rs.next()) {
	            SanPham product = new SanPham();
	            // ... other fields ...
	            
	            // Handle image path with proper formatting
	            String dbImagePath = rs.getString("imagePath");
	            if (dbImagePath != null && !dbImagePath.trim().isEmpty()) {
	                // Ensure the path uses correct separators and format
	                String formattedPath = "/images/" + dbImagePath.replace("\\", "/");
	                product.setHinhAnh(formattedPath);
	            } else {
	                // Set default image path if no image in database
	                product.setHinhAnh("/images/default-product.png");
	            }
	            
	            products.add(product);
	        }
	    } catch (SQLException e) {
	        LOGGER.severe("Error retrieving products: " + e.getMessage());
	    }
	    return products;
	}

	public List<SanPham> searchProductsByName(String keyword) {
		List<SanPham> searchResults = new ArrayList<>();

		// Enhanced SQL query with JOIN to get category information
		String sql = """
				SELECT p.*, c.name as category_name
				FROM product p
				LEFT JOIN category c ON p.category = c.categoryID
				WHERE LOWER(p.name) LIKE LOWER(?)
				""";

		try (Connection conn = myConnection.connect(); PreparedStatement pst = conn.prepareStatement(sql)) {

			String searchPattern = "%" + keyword.trim() + "%";
			pst.setString(1, searchPattern);
			ResultSet rs = pst.executeQuery();

			while (rs.next()) {
				// Using the existing helper method for consistent object creation
				SanPham product = createSanPhamFromResultSet(rs);
				searchResults.add(product);
			}

			LOGGER.info("Found " + searchResults.size() + " products matching: " + keyword);

		} catch (SQLException e) {
			LOGGER.severe("Error searching products with keyword '" + keyword + "': " + e.getMessage());
		} finally {
			myConnection.closeConnection();
		}

		return searchResults;
	}
}