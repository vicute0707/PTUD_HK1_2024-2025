package component;

import entity.User;
import entity.UserRole;
import bus.UserBUS;
import bus.UserRoleBUS;
import dialog.EmployeeDialog;

import javax.swing.*;
import java.util.List;
import java.awt.Dimension;
import java.awt.Font;
import java.text.SimpleDateFormat;

public class EmployeeManagementPanel extends BaseManagementPanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public class EmployeeManagementPanel extends BaseManagementPanel {
	    private final UserBUS userBUS;
	    private final UserRoleBUS userRoleBUS;
	    private final SimpleDateFormat dateFormat;
	    private JComboBox<String> roleComboBox;

	    public EmployeeManagementPanel() {
	        super("Quản lý nhân viên", new String[] { "Mã NV", "Họ tên", "Tên đăng nhập", "Giới tính", "Ngày sinh", "SDT",
	                "Email", "Vai trò", "Trạng thái" }, loadEmployeeData());
	        userBUS = new UserBUS();
	        userRoleBUS = new UserRoleBUS();
	        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	        initializeRoleComboBox();
	    }

	    private void initializeRoleComboBox() {
	        roleComboBox = new JComboBox<>();
	        loadRoles();
	    }

	    private void loadRoles() {
	        try {
	            List<UserRole> roles = userRoleBUS.getAllRoles();
	            roleComboBox.removeAllItems();
	            for (UserRole role : roles) {
	                roleComboBox.addItem(role.getRoleName());
	            }
	        } catch (Exception e) {
	            JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách vai trò: " + e.getMessage(),
	                    "Lỗi", JOptionPane.ERROR_MESSAGE);
	        }
	    }

	    @Override
	    protected void handleEdit() {
	        try {
	            int selectedRow = table.getSelectedRow();
	            if (selectedRow < 0) {
	                JOptionPane.showMessageDialog(this, "Vui lòng chọn một nhân viên để sửa.",
	                        "Thông báo", JOptionPane.WARNING_MESSAGE);
	                return;
	            }

	            String userID = table.getValueAt(selectedRow, 0).toString();
	            User user = userBUS.getUserById(userID);

	            if (user == null) {
	                JOptionPane.showMessageDialog(this, "Không tìm thấy thông tin nhân viên.",
	                        "Lỗi", JOptionPane.ERROR_MESSAGE);
	                return;
	            }

	            EmployeeDialog dialog = new EmployeeDialog(
	                (JFrame) SwingUtilities.getWindowAncestor(this),
	                "Sửa thông tin nhân viên",
	                user,
	                false
	            );
	            dialog.setVisible(true);

	            if (dialog.isConfirmed()) {
	                boolean success = userBUS.updateUser(user);
	                if (success) {
	                    refreshTable();
	                    JOptionPane.showMessageDialog(this, "Cập nhật thông tin nhân viên thành công!");
	                } else {
	                    JOptionPane.showMessageDialog(this, "Không thể cập nhật thông tin nhân viên.",
	                            "Lỗi", JOptionPane.ERROR_MESSAGE);
	                }
	            }
	        } catch (Exception e) {
	            JOptionPane.showMessageDialog(this, "Lỗi khi sửa nhân viên: " + e.getMessage(),
	                    "Lỗi", JOptionPane.ERROR_MESSAGE);
	        }
	    }

	    @Override
	    protected void handleDelete() {
	        try {
	            int selectedRow = table.getSelectedRow();
	            if (selectedRow < 0) {
	                JOptionPane.showMessageDialog(this, "Vui lòng chọn một nhân viên để xóa.",
	                        "Thông báo", JOptionPane.WARNING_MESSAGE);
	                return;
	            }

	            String userID = table.getValueAt(selectedRow, 0).toString();
	            String username = table.getValueAt(selectedRow, 2).toString();

	            int confirm = JOptionPane.showConfirmDialog(this,
	                    "Bạn có chắc chắn muốn xóa nhân viên " + username + "?",
	                    "Xác nhận xóa",
	                    JOptionPane.YES_NO_OPTION);

	            if (confirm == JOptionPane.YES_OPTION) {
	                boolean success = userBUS.deleteUser(userID);
	                if (success) {
	                    refreshTable();
	                    JOptionPane.showMessageDialog(this, "Xóa nhân viên thành công!");
	                } else {
	                    JOptionPane.showMessageDialog(this, "Không thể xóa nhân viên.",
	                            "Lỗi", JOptionPane.ERROR_MESSAGE);
	                }
	            }
	        } catch (Exception e) {
	            JOptionPane.showMessageDialog(this, "Lỗi khi xóa nhân viên: " + e.getMessage(),
	                    "Lỗi", JOptionPane.ERROR_MESSAGE);
	        }
	    }

	    private static Object[][] loadEmployeeData() {
	        UserBUS bus = new UserBUS();
	        List<User> users = bus.getAllUsers();
	        Object[][] data = new Object[users.size()][9];
	        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

	        for (int i = 0; i < users.size(); i++) {
	            User user = users.get(i);
	            data[i] = new Object[] { user.getUserID(), user.getFullName(), user.getUsername(), user.getGender(),
	                    sdf.format(user.getBirthDate()), user.getPhone(), user.getEmail(), user.getRole(),
	                    user.getStatus() };
	        }
	        return data;
	    }
}

	@Override
	protected void handleAdd() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void handleAbout() {
		// TODO Auto-generated method stub
		
	}